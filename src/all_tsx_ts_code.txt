import { Skeleton } from "@/components/shadcn/skeleton";

export const MovieDetailsSkeleton = () => (
  <div className="min-h-screen bg-black text-white">
    <div className="relative h-[80vh] overflow-hidden">
      <Skeleton className="absolute inset-0 w-full h-full object-cover" />
      <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent">
        <div className="absolute bottom-20 left-0 px-8">
          <Skeleton className="h-12 w-64 mb-4" />
          <Skeleton className="h-6 w-96 mb-8" />
          <div className="flex gap-4">
            <Skeleton className="h-12 w-32" />
            <Skeleton className="h-12 w-40" />
          </div>
        </div>
      </div>
    </div>
    <div className="max-w-7xl mx-auto px-8 py-12">
      <div className="grid gap-8 md:grid-cols-[2fr,1fr]">
        <div>
          <Skeleton className="h-8 w-48 mb-4" />
          <Skeleton className="h-4 w-full mb-8" />
          <Skeleton className="h-8 w-full mb-8" />
          <Skeleton className="h-8 w-full mb-8" />
        </div>
        <div className="space-y-8">
          <Skeleton className="h-4 w-24 mb-2" />
          <Skeleton className="h-4 w-16" />
          <Skeleton className="h-4 w-24 mb-2" />
          <Skeleton className="h-4 w-48" />
          <Skeleton className="h-4 w-24 mb-2" />
          <Skeleton className="h-4 w-48" />
        </div>
      </div>
    </div>
  </div>
);import { useAuth } from '@/hooks/useAuth';
import { Navigate, useLocation } from 'react-router-dom';
import { routeConfig } from '@/lib/routerConfig';
import { ERoles } from '@/interfaces/auth/IAuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
  const { isAuthenticated, isLoading, user } = useAuth();
  const location = useLocation();

  // Wait for authentication check to complete
  if (isLoading) {
    return null; // or your loading component
  }

  // Find the route configuration for the current path
  const currentRoute = Object.values(routeConfig).find(route => {
    // Convert route path to regex to handle dynamic parameters
    const pathRegex = new RegExp(
      '^' + route.path.replace(/:\w+/g, '([^/]+)') + '$'
    );
    return pathRegex.test(location.pathname);
  });

  // Case 4: Route not found in config - redirect to 404
  // Exclude the 404 page itself from this check to prevent infinite loops
  if (!currentRoute && location.pathname !== '/404') {
    return <Navigate to="/404" replace />;
  }

  // Special case for unauthorized to login flow
  if (location.pathname === '/login') {
    // Allow access to login if user came from unauthorized page or clicking "Get Permission"
    const cameFromUnauthorized = location.state?.from === '/unauthorized';
    const isGetPermissionFlow = location.state?.getPermission === true;
    
    if (cameFromUnauthorized || isGetPermissionFlow) {
      return <>{children}</>;
    }
    // Otherwise, redirect authenticated users
    if (isAuthenticated) {
      return <Navigate to="/" replace />;
    }
  }

  // Regular login/register pages check
  if (['/register'].includes(location.pathname)) {
    if (isAuthenticated) {
      return <Navigate to="/" replace />;
    }
  }

  // Case 1: Protected route but not authenticated
  if (currentRoute?.isProtected && !isAuthenticated) {
    return <Navigate to="/login" replace state={{ from: location.pathname }} />;
  }

  // Case 3: Role-based access check
  if (currentRoute?.roles && isAuthenticated && user) {
    const hasRequiredRole = currentRoute.roles.includes(user.role as ERoles);
    if (!hasRequiredRole) {
      return <Navigate to="/unauthorized" replace />;
    }
  }

  // If all checks pass, render the route
  return <>{children}</>;
};

export default ProtectedRoute;// import { Card, CardContent, CardHeader, CardTitle } from "@/components/shadcn/card";
// import { Input } from "@/components/shadcn/input";
// import { Label } from "@/components/shadcn/label";
// import { Button } from "@/components/shadcn/button";
// import { Plus, Armchair, X } from "lucide-react";
// import { SectionState } from "@/interfaces/IHalls";

// interface TheaterLayoutDesignerProps {
//   sections: SectionState[];
//   setSections: React.Dispatch<React.SetStateAction<SectionState[]>>;
// }

// const TheaterLayoutDesigner = ({ sections, setSections }: TheaterLayoutDesignerProps) => {
//   const addSection = () => {
//     setSections((prev) => [
//       ...prev,
//       {
//         id: Date.now(),
//         rows: 6,
//         columns: 6,
//         startRow: "A",
//         // By default, shift startNumber to be the next seat # after the last section's highest seat
//         startNumber:
//           prev[prev.length - 1]?.startNumber + prev[prev.length - 1]?.columns ||
//           1,
//         selectedSeats: new Set<string>(),
//       },
//     ]);
//   };

//   const removeSection = (id: number) => {
//     setSections((prev) => prev.filter((section) => section.id !== id));
//   };

//   const updateSection = (id: number, field: keyof Omit<SectionState, 'id' | 'selectedSeats'>, value: number | string) => {
//     setSections((prev) =>
//       prev.map((section) =>
//         section.id === id ? { ...section, [field]: value } : section
//       )
//     );
//   };

//   const toggleSeatSelection = (sectionId: number, seatId: string) => {
//     setSections((prev) =>
//       prev.map((section) => {
//         if (section.id === sectionId) {
//           const newSelectedSeats = new Set(section.selectedSeats);
//           if (newSelectedSeats.has(seatId)) {
//             newSelectedSeats.delete(seatId);
//           } else {
//             newSelectedSeats.add(seatId);
//           }
//           return { ...section, selectedSeats: newSelectedSeats };
//         }
//         return section;
//       })
//     );
//   };

//   // Find the global row range across all sections
//   const getGlobalRowRange = () => {
//     const minRowChar = Math.min(
//       ...sections.map((s) => s.startRow.charCodeAt(0))
//     );
//     const maxRowChar = Math.max(
//       ...sections.map((s) => s.startRow.charCodeAt(0) + s.rows - 1)
//     );
//     return {
//       startChar: String.fromCharCode(minRowChar),
//       endChar: String.fromCharCode(maxRowChar),
//     };
//   };

//   // Renders seats for one rowChar in a single pass across all sections
//   const renderRowAcrossSections = (rowChar: string) => {
//     return sections.map((section, index) => {
//       const rowIndex = rowChar.charCodeAt(0) - section.startRow.charCodeAt(0);
//       if (rowIndex < 0 || rowIndex >= section.rows) {
//         return null;
//       }

//       const seats = [];
//       for (let c = 0; c < section.columns; c++) {
//         const seatNumber = section.startNumber + c;
//         const seatId = `${rowChar}${seatNumber}`;
//         const isSelected = section.selectedSeats.has(seatId);

//         seats.push(
//           <div
//             key={seatId}
//             className="flex flex-col items-center gap-1 cursor-pointer"
//             onClick={() => toggleSeatSelection(section.id, seatId)}
//           >
//             <Armchair
//               className={`w-8 h-8 transition-colors ${
//                 isSelected ? "text-blue-600" : "text-gray-400"
//               }`}
//             />
//             {isSelected && (
//               <span className="text-xs font-medium">{seatId}</span>
//             )}
//           </div>
//         );
//       }

//       return (
//         <div key={`sect-${section.id}`} className="flex items-center">
//           {index > 0 && <div className="mx-5" />}
//           {seats}
//         </div>
//       );
//     });
//   };

//   // Merge all rows from the earliest to the latest
//   const renderAllRows = () => {
//     const { startChar, endChar } = getGlobalRowRange();
//     const rows = [];

//     for (
//       let rowCode = startChar.charCodeAt(0);
//       rowCode <= endChar.charCodeAt(0);
//       rowCode++
//     ) {
//       const rowChar = String.fromCharCode(rowCode);
//       const rowSegments = renderRowAcrossSections(rowChar);

//       if (rowSegments.every((seg) => seg === null)) {
//         continue;
//       }

//       rows.push(
//         <div key={`row-${rowChar}`} className="flex items-center gap-8">
//           <div className="w-8 flex items-center justify-center font-medium">
//             {rowChar}
//           </div>
//           <div className="flex">{rowSegments}</div>
//         </div>
//       );
//     }

//     return rows;
//   };

//   // Render bottom seat numbers
//   const renderBottomNumbers = () => {
//     return (
//       <div className="flex items-center mt-5">
//         <div className="w-16" />
//         <div className="flex items-center">
//           {sections.map((section, i) => {
//             const nums = [];
//             for (let c = 0; c < section.columns; c++) {
//               const seatNumber = section.startNumber + c;
//               nums.push(
//                 <div
//                   key={`num-${section.id}-${seatNumber}`}
//                   className="w-8 text-center text-sm font-medium"
//                 >
//                   {seatNumber}
//                 </div>
//               );
//             }
//             return (
//               <div key={`nums-${section.id}`} className="flex items-center">
//                 {i > 0 && <div className="mx-5" />}
//                 {nums}
//               </div>
//             );
//           })}
//         </div>
//       </div>
//     );
//   };

//   return (
//     <Card className="w-full max-w-6xl mx-auto">
//       <CardHeader>
//         <div className="flex items-center justify-between">
//           <CardTitle>Theater Layout Designer</CardTitle>
//           <Button onClick={addSection} variant="outline" size="sm">
//             <Plus className="w-4 h-4 mr-2" />
//             Add Section
//           </Button>
//         </div>
//       </CardHeader>
//       <CardContent>
//         {/* Sections Controls */}
//         <div className="flex flex-wrap justify-center gap-3">
//           {sections.map((section, index) => (
//             <Card key={section.id} className="p-4 w-fit">
//               <div className="flex items-center justify-between mb-4">
//                 <h3 className="font-medium">Section {index + 1}</h3>
//                 {sections.length > 1 && (
//                   <Button
//                     variant="ghost"
//                     size="sm"
//                     onClick={() => removeSection(section.id)}
//                   >
//                     <X className="w-4 h-4" />
//                   </Button>
//                 )}
//               </div>
//               <div className="flex flex-col gap-4">
//                 <div className="space-y-2">
//                   <Label>Rows</Label>
//                   <Input
//                     type="number"
//                     value={section.rows}
//                     onChange={(e) =>
//                       updateSection(section.id, "rows", Number(e.target.value))
//                     }
//                     min="1"
//                   />
//                 </div>
//                 <div className="space-y-2">
//                   <Label>Columns</Label>
//                   <Input
//                     type="number"
//                     value={section.columns}
//                     onChange={(e) =>
//                       updateSection(
//                         section.id,
//                         "columns",
//                         Number(e.target.value)
//                       )
//                     }
//                     min="1"
//                   />
//                 </div>
//                 <div className="space-y-2">
//                   <Label>Start Row</Label>
//                   <Input
//                     type="text"
//                     value={section.startRow}
//                     onChange={(e) =>
//                       updateSection(
//                         section.id,
//                         "startRow",
//                         e.target.value.toUpperCase()
//                       )
//                     }
//                     maxLength={1}
//                   />
//                 </div>
//                 <div className="space-y-2">
//                   <Label>Start Number</Label>
//                   <Input
//                     type="number"
//                     value={section.startNumber}
//                     onChange={(e) =>
//                       updateSection(
//                         section.id,
//                         "startNumber",
//                         Number(e.target.value)
//                       )
//                     }
//                     min="1"
//                   />
//                 </div>
//               </div>
//             </Card>
//           ))}
//         </div>

//         {/* Layout Preview */}
//         <div className="mt-8 flex flex-col items-center gap-10">
//           {/* Screen */}
//           <div className="w-full max-w-3xl h-8 bg-primary rounded-sm flex items-center justify-center text-white">
//             Screen
//           </div>

//           {/* Combined rows & columns below the screen, centered */}
//           <div className="flex flex-col gap-2.5 items-center p-4 rounded-sm">
//             {renderAllRows()}
//             {renderBottomNumbers()}
//           </div>
//         </div>
//       </CardContent>
//     </Card>
//   );
// };

// export default TheaterLayoutDesigner;

// HallLayoutDesignerDialog.tsx
import React from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/shadcn/dialog";
import { Button } from "@/components/shadcn/button";
import { Armchair, Plus, X } from "lucide-react";
import { Card, CardContent } from "@/components/shadcn/card";
import { Input } from "@/components/shadcn/input";
import { Label } from "@/components/shadcn/label";
import { SectionState } from "@/interfaces/IHalls";

interface HallLayoutDesignerDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  sections: SectionState[];
  setSections: React.Dispatch<React.SetStateAction<SectionState[]>>;
}

const HallLayoutDesignerDialog = ({
  open,
  onOpenChange,
  sections,
  setSections,
}: HallLayoutDesignerDialogProps) => {
  const addSection = () => {
    setSections((prev) => [
      ...prev,
      {
        id: Date.now(),
        rows: 6,
        columns: 6,
        startRow: "A",
        startNumber:
          prev[prev.length - 1]?.startNumber + prev[prev.length - 1]?.columns ||
          1,
        selectedSeats: new Set<string>(),
      },
    ]);
  };

  const removeSection = (id: number) => {
    setSections((prev) => prev.filter((section) => section.id !== id));
  };

  const updateSection = (
    id: number,
    field: keyof Omit<SectionState, "id" | "selectedSeats">,
    value: number | string
  ) => {
    setSections((prev) =>
      prev.map((section) =>
        section.id === id ? { ...section, [field]: value } : section
      )
    );
  };

  const toggleSeatSelection = (sectionId: number, seatId: string) => {
    setSections((prev) =>
      prev.map((section) => {
        if (section.id === sectionId) {
          const newSelectedSeats = new Set(section.selectedSeats);
          if (newSelectedSeats.has(seatId)) {
            newSelectedSeats.delete(seatId);
          } else {
            newSelectedSeats.add(seatId);
          }
          return { ...section, selectedSeats: newSelectedSeats };
        }
        return section;
      })
    );
  };

  // Find the global row range across all sections
  const getGlobalRowRange = () => {
    const minRowChar = Math.min(...sections.map((s) => s.startRow.charCodeAt(0)));
    const maxRowChar = Math.max(
      ...sections.map((s) => s.startRow.charCodeAt(0) + s.rows - 1)
    );
    return {
      startChar: String.fromCharCode(minRowChar),
      endChar: String.fromCharCode(maxRowChar),
    };
  };

  const renderRowAcrossSections = (rowChar: string) => {
    return sections.map((section, index) => {
      const rowIndex = rowChar.charCodeAt(0) - section.startRow.charCodeAt(0);
      if (rowIndex < 0 || rowIndex >= section.rows) {
        return null;
      }

      const seats = [];
      for (let c = 0; c < section.columns; c++) {
        const seatNumber = section.startNumber + c;
        const seatId = `${rowChar}${seatNumber}`;
        const isSelected = section.selectedSeats.has(seatId);

        seats.push(
          <div
            key={seatId}
            className="flex flex-col items-center gap-1 cursor-pointer"
            onClick={() => toggleSeatSelection(section.id, seatId)}
          >
            <Armchair
              className={`w-6 h-6 transition-colors ${
                isSelected ? "text-blue-600" : "text-gray-400"
              }`}
            />
            {isSelected && <span className="text-xs font-medium">{seatId}</span>}
          </div>
        );
      }

      return (
        <div key={`sect-${section.id}`} className="flex items-center">
          {index > 0 && <div className="mx-5" />}
          {seats}
        </div>
      );
    });
  };

  const renderAllRows = () => {
    const { startChar, endChar } = getGlobalRowRange();
    const rows = [];

    for (
      let rowCode = startChar.charCodeAt(0);
      rowCode <= endChar.charCodeAt(0);
      rowCode++
    ) {
      const rowChar = String.fromCharCode(rowCode);
      const rowSegments = renderRowAcrossSections(rowChar);

      // skip row if all segments are null
      if (rowSegments.every((seg) => seg === null)) {
        continue;
      }

      rows.push(
        <div key={`row-${rowChar}`} className="flex items-center gap-8">
          <div className="w-8 flex items-center justify-center font-medium">
            {rowChar}
          </div>
          <div className="flex">{rowSegments}</div>
        </div>
      );
    }

    return rows;
  };

  const renderBottomNumbers = () => {
    return (
      <div className="flex items-center mt-5">
        <div className="w-[4em]" />
        <div className="flex items-center">
          {sections.map((section, i) => {
            const nums = [];
            for (let c = 0; c < section.columns; c++) {
              const seatNumber = section.startNumber + c;
              nums.push(
                <div
                  key={`num-${section.id}-${seatNumber}`}
                  className="w-[25px] text-center text-sm font-medium"
                >
                  {seatNumber}
                </div>
              );
            }
            return (
              <div key={`nums-${section.id}`} className="flex items-center">
                {i > 0 && <div className="mx-[1rem]" />}
                {nums}
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="min-w-[80vw] max-h-[90vh] overflow-auto">
        <DialogHeader>
          <DialogTitle>Theater Layout Designer</DialogTitle>
          <DialogDescription>
            Configure seats, rows, and columns for each section.
          </DialogDescription>
        </DialogHeader>

        <div className="flex items-center justify-between mb-4">
          <Button onClick={addSection} variant="outline" size="sm">
            <Plus className="w-4 h-4 mr-2" />
            Add Section
          </Button>
        </div>

        {/* Sections Controls */}
        <div className="flex flex-wrap justify-center  gap-3 mb-8">
          {sections.map((section, index) => (
            <Card key={section.id} className="p-4 w-fit">
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-medium">Section {index + 1}</h3>
                {sections.length > 1 && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => removeSection(section.id)}
                  >
                    <X className="w-4 h-4" />
                  </Button>
                )}
              </div>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label>Rows</Label>
                  <Input
                    type="number"
                    value={section.rows}
                    onChange={(e) =>
                      updateSection(section.id, "rows", Number(e.target.value))
                    }
                    min="1"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Columns</Label>
                  <Input
                    type="number"
                    value={section.columns}
                    onChange={(e) =>
                      updateSection(
                        section.id,
                        "columns",
                        Number(e.target.value)
                      )
                    }
                    min="1"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Start Row</Label>
                  <Input
                    type="text"
                    value={section.startRow}
                    onChange={(e) =>
                      updateSection(
                        section.id,
                        "startRow",
                        e.target.value.toUpperCase()
                      )
                    }
                    maxLength={1}
                  />
                </div>
                <div className="space-y-2">
                  <Label>Start Number</Label>
                  <Input
                    type="number"
                    value={section.startNumber}
                    onChange={(e) =>
                      updateSection(
                        section.id,
                        "startNumber",
                        Number(e.target.value)
                      )
                    }
                    min="1"
                  />
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Layout Preview */}
        <div className="mt-4 flex flex-col items-center gap-8">
          {/* Screen */}
          <div className="w-full max-w-3xl h-8 bg-primary rounded-sm flex items-center justify-center text-white">
            Screen
          </div>

          {/* Seats */}
          <div className="flex flex-col gap-2.5 items-center p-4 rounded-sm">
            {renderAllRows()}
            {renderBottomNumbers()}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default HallLayoutDesignerDialog;
import { useState } from "react";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/shadcn/table";
import { Dialog, DialogContent } from "@/components/shadcn/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/shadcn/select";
import { Button } from "@/components/shadcn/button";
import { Pencil, Trash2 } from "lucide-react";
import { Switch } from "@/components/shadcn/switch";

import AlertDialog from "@/components/common/AlertDialog";
import ViewHall from "./ViewHall";

import {
  useDeleteHall,
  useGetAllHalls,
  useGetHallLayout,
  useToggleHallStatus,
} from "@/api/hallApi";
import { useFetchAllTheatres } from "@/api/theatreApi";
import EditHallDialog from "./UpdateLayoutDialog";

interface Hall {
  _id: string;
  name: string;
  theatreId: string;
  location: string;
  isActive: boolean;

  totalSeats: number;
  layout: {
    sections: {
      rows: number;
      columns: number;
      startRow: string;
      startNumber: number;
    }[];
  };
}

const HallsTable = () => {
  const [selectedTheatre, setSelectedTheatre] = useState<string>("");
  const [selectedLocation, setSelectedLocation] = useState<string>("");
  const [selectedHallId, setSelectedHallId] = useState<string>("");
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [showLayoutDialog, setShowLayoutDialog] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [selectedHall, setSelectedHall] = useState<Hall | null>(null);

  const { data: theatres } = useFetchAllTheatres();
  const { data: halls, isLoading, isError } = useGetAllHalls();
  const { data: hallLayout } = useGetHallLayout(selectedHallId);

  const deleteHallMutation = useDeleteHall();

  const toggleStatusMutation = useToggleHallStatus();

  const handleToggleStatus = async (hallId: string) => {
    await toggleStatusMutation.mutateAsync(hallId);
  };

  const handleEditClick = (hall: Hall) => {
    setSelectedHall(hall);
    setEditDialogOpen(true);
  };

  const handleDeleteClick = (distributorId: string) => {
    setSelectedHallId(distributorId);
    setDeleteDialogOpen(true);
  };

  const handleDeleteConfirm = async () => {
    if (selectedHallId) {
      await deleteHallMutation.mutateAsync(selectedHallId);
      setDeleteDialogOpen(false);
      setSelectedHallId("");
    }
  };

  const selectedTheatreData = theatres?.find((t) => t._id === selectedTheatre);
  const locationOptions = selectedTheatreData?.locations || [];

  const filteredHalls: Hall[] =
    halls?.filter((hall: Hall) => {
      if (selectedTheatre && hall.theatreId !== selectedTheatre) return false;
      if (selectedLocation && hall.location !== selectedLocation) return false;
      return true;
    }) || [];

  const handleViewHall = (hallId: string) => {
    setSelectedHallId(hallId);
    setShowLayoutDialog(true);
  };

  if (isLoading) {
    return <div>Loading Halls...</div>;
  }
  if (isError) {
    return <div>Failed to load halls. Please try again.</div>;
  }

  return (
    <div className="space-y-4">
      {/* Filters */}
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">Halls</h2>
        <div className="flex items-center gap-4">
          {/* Theatre Filter */}
          <div className="w-[200px]">
            <Select value={selectedTheatre} onValueChange={setSelectedTheatre}>
              <SelectTrigger>
                <SelectValue placeholder="Select Theatre" />
              </SelectTrigger>
              <SelectContent>
                {theatres?.map((theatre) => (
                  <SelectItem key={theatre._id} value={theatre._id}>
                    {theatre.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Location Filter */}
          <div className="w-[200px]">
            <Select
              value={selectedLocation}
              onValueChange={setSelectedLocation}
              disabled={!selectedTheatre}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select Location" />
              </SelectTrigger>
              <SelectContent>
                {locationOptions.map((location) => (
                  <SelectItem key={location.address} value={location.address}>
                    {location.address}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>

      {/* Table */}
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>SN</TableHead>
            <TableHead>Halls</TableHead>
            <TableHead>Theatre</TableHead>
            <TableHead>Location</TableHead>
            <TableHead>IsActive</TableHead>
            <TableHead>Layout</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {filteredHalls.map((hall, index) => {
            const theatre = theatres?.find((t) => t._id === hall.theatreId);

            return (
              <TableRow key={hall._id}>
                <TableCell>{index + 1}</TableCell>
                <TableCell>{hall.name}</TableCell>
                <TableCell>{theatre?.name}</TableCell>
                <TableCell>{hall.location}</TableCell>
                <TableCell>
                  <Switch
                    checked={hall.isActive}
                    onCheckedChange={() => handleToggleStatus(hall._id)}
                    disabled={toggleStatusMutation.isPending}
                  />
                </TableCell>
                <TableCell>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleViewHall(hall._id)}
                  >
                    View Layout
                  </Button>
                </TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() => handleEditClick(hall)}
                    >
                      <Pencil className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() => handleDeleteClick(hall._id)}
                      disabled={deleteHallMutation.isPending}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            );
          })}
        </TableBody>
      </Table>

      {/* Layout Dialog */}
      <Dialog open={showLayoutDialog} onOpenChange={setShowLayoutDialog}>
        <DialogContent className="max-w-[80vw]">
          {hallLayout && <ViewHall layout={hallLayout.layout} />}
        </DialogContent>
      </Dialog>
      {/* Delete Confirmation Dialog */}
      <AlertDialog
        isOpen={deleteDialogOpen}
        onClose={() => setDeleteDialogOpen(false)}
        onConfirm={handleDeleteConfirm}
        description="This action cannot be undone. This will permanently remove this hall and their data from our servers."
        isProcessing={deleteHallMutation.isPending}
        actionText="Delete Distributor"
        processingText="Deleting"
      />
      {selectedHall && (
        <EditHallDialog
          open={editDialogOpen}
          onOpenChange={setEditDialogOpen}
          hall={selectedHall}
        />
      )}
    </div>
  );
};

export default HallsTable;
import React from 'react';
import { Armchair } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/shadcn/card';

interface Section {
  rows: number;
  columns: number;
  startRow: string;
  startNumber: number;
}

interface LayoutData {
  sections: Section[];
}

interface ViewLayoutProps {
  layout: LayoutData;
}

const ViewLayout: React.FC<ViewLayoutProps> = ({ layout }) => {
  const getGlobalRowRange = () => {
    const minRowChar = Math.min(
      ...layout.sections.map((s) => s.startRow.charCodeAt(0))
    );
    const maxRowChar = Math.max(
      ...layout.sections.map((s) => s.startRow.charCodeAt(0) + s.rows - 1)
    );
    return {
      startChar: String.fromCharCode(minRowChar),
      endChar: String.fromCharCode(maxRowChar),
    };
  };

  const renderRowAcrossSections = (rowChar: string) => {
    return layout.sections.map((section, index) => {
      const rowIndex = rowChar.charCodeAt(0) - section.startRow.charCodeAt(0);
      if (rowIndex < 0 || rowIndex >= section.rows) {
        return null;
      }

      const seats = [];
      for (let c = 0; c < section.columns; c++) {
        const seatNumber = section.startNumber + c;
        const seatId = `${rowChar}${seatNumber}`;

        seats.push(
          <div key={seatId} className="flex flex-col items-center gap-1">
            <Armchair className="w-6 h-6 text-gray-400" />
            <span className="text-xs font-medium">{seatId}</span>
          </div>
        );
      }

      return (
        <div key={`sect-${index}`} className="flex items-center">
          {index > 0 && <div className="mx-5" />}
          {seats}
        </div>
      );
    });
  };

  const renderAllRows = () => {
    const { startChar, endChar } = getGlobalRowRange();
    const rows = [];

    for (
      let rowCode = startChar.charCodeAt(0);
      rowCode <= endChar.charCodeAt(0);
      rowCode++
    ) {
      const rowChar = String.fromCharCode(rowCode);
      const rowSegments = renderRowAcrossSections(rowChar);

      if (rowSegments.every((seg) => seg === null)) {
        continue;
      }

      rows.push(
        <div key={`row-${rowChar}`} className="flex items-center gap-8">
          <div className="w-8 flex items-center justify-center font-medium">
            {rowChar}
          </div>
          <div className="flex">{rowSegments}</div>
        </div>
      );
    }

    return rows;
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Hall Layout</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="mt-4 flex flex-col items-center gap-8">
          <div className="w-full max-w-3xl h-8 bg-primary rounded-sm flex items-center justify-center text-white">
            Screen
          </div>
          <div className="flex flex-col gap-2.5 items-center p-4 rounded-sm">
            {renderAllRows()}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default ViewLayout;import { useState } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
} from "@/components/shadcn/card";
import { Input } from "@/components/shadcn/input";
import { Label } from "@/components/shadcn/label";
import { Button } from "@/components/shadcn/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/shadcn/select";
import { CreateHallRequest, SectionState } from "@/interfaces/IHalls";
import { useCreateHall } from "@/api/hallApi";
import { useFetchAllTheatres } from "@/api/theatreApi";

// Import the dialog-based Layout Designer
import HallLayoutDesignerDialog from "@/components/pageComponents/halls/LayoutDesigner";

const CreateHallForm = () => {
  const [formData, setFormData] = useState({
    theatreId: "",
    location: "",
    name: "",
  });
  const [sections, setSections] = useState<SectionState[]>([
    {
      id: 1,
      rows: 6,
      columns: 6,
      startRow: "A",
      startNumber: 1,
      selectedSeats: new Set(),
    },
  ]);

  // State to control the layout designer dialog
  const [openDesignerDialog, setOpenDesignerDialog] = useState(false);

  const { data: theatres } = useFetchAllTheatres();
  const createHallMutation = useCreateHall();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const totalSeats = sections.reduce(
      (total, section) => total + section.rows * section.columns,
      0
    );

    const payload: CreateHallRequest = {
      ...formData,
      layout: {
        sections: sections.map(({ ...section }) => section),
      },
      totalSeats,
    };

    createHallMutation.mutate(payload);
  };

  const updateFormData = (field: keyof typeof formData, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const selectedTheatre = theatres?.find((t) => t._id === formData.theatreId);
  const locationOptions = selectedTheatre?.locations || [];

  return (
    <form onSubmit={handleSubmit} className="space-y-8">
      <Card className="w-fit min-w-[50vw] p-5">
        <CardHeader>
          <CardTitle>Create a Hall</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-2">
            <Label>Theatre</Label>
            <Select
              value={formData.theatreId}
              onValueChange={(value) => updateFormData("theatreId", value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select a theatre" />
              </SelectTrigger>
              <SelectContent>
                {theatres?.map((theatre) => (
                  <SelectItem key={theatre._id} value={theatre._id}>
                    {theatre.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label>Location</Label>
            <Select
              value={formData.location}
              onValueChange={(value) => updateFormData("location", value)}
              disabled={!formData.theatreId}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select a location" />
              </SelectTrigger>
              <SelectContent>
                {locationOptions.map((location) => (
                  <SelectItem key={location.address} value={location.address}>
                    {location.address}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="flex justify-between gap-32 items-end">
            <div className="w-full">
              <Label>Hall Name</Label>
              <Input
                className="min-"
                value={formData.name}
                onChange={(e) => updateFormData("name", e.target.value)}
                placeholder="Enter hall name"
                required
              />
            </div>
            {/* Button to open the Layout Designer dialog */}
            <Button
              type="button"
              variant="outline"
              onClick={() => setOpenDesignerDialog(true)}
            >
              Configure Layout
            </Button>
          </div>
        </CardContent>

        <Button
          type="submit"
          className="w-full"
          disabled={createHallMutation.isPending}
        >
          {createHallMutation.isPending ? "Creating..." : "Create Hall"}
        </Button>
      </Card>

      {/* The Theater Layout Designer is in a dialog now */}
      <HallLayoutDesignerDialog
        open={openDesignerDialog}
        onOpenChange={setOpenDesignerDialog}
        sections={sections}
        setSections={setSections}
      />
    </form>
  );
};

export default CreateHallForm;
// EditHallDialog.tsx
import React, { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/shadcn/dialog";
import { Button } from "@/components/shadcn/button";
import { Input } from "@/components/shadcn/input";
import { Label } from "@/components/shadcn/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/shadcn/select";
import { Hall, SectionState } from "@/interfaces/IHalls";
import { useFetchAllTheatres } from "@/api/theatreApi";
import { useUpdateHall } from "@/api/hallApi";
import HallLayoutDesignerDialog from "./LayoutDesigner";

interface EditHallDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  hall: Hall;
}

const EditHallDialog = ({ open, onOpenChange, hall }: EditHallDialogProps) => {
  const [formData, setFormData] = useState({
    theatreId: "",
    location: "",
    name: "",
  });

  const [sections, setSections] = useState<SectionState[]>([]);
  const [layoutDesignerOpen, setLayoutDesignerOpen] = useState(false);

  const { data: theatres } = useFetchAllTheatres();
  const updateHallMutation = useUpdateHall();

  // Initialize form data when hall prop changes
  useEffect(() => {
    if (hall) {
      setFormData({
        theatreId: hall.theatreId,
        location: hall.location,
        name: hall.name,
      });

      // Convert hall layout sections to SectionState format
      setSections(
        hall.layout.sections.map((section, index) => ({
          id: index + 1,
          rows: section.rows,
          columns: section.columns,
          startRow: section.startRow,
          startNumber: section.startNumber,
          selectedSeats: new Set(),
        }))
      );
    }
  }, [hall]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const totalSeats = sections.reduce(
      (total, section) => total + section.rows * section.columns,
      0
    );

    const updatedHall: Hall = {
      ...hall,
      ...formData,
      layout: {
    sections: sections.map(({ ...section }) => section),
      },
      totalSeats,
    };

    await updateHallMutation.mutateAsync(updatedHall);
    onOpenChange(false);
  };

  const updateFormData = (field: keyof typeof formData, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const selectedTheatre = theatres?.find((t) => t._id === formData.theatreId);
  const locationOptions = selectedTheatre?.locations || [];

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle>Edit Hall</DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div>
              <Label>Theatre</Label>
              <Select
                value={formData.theatreId}
                onValueChange={(value) => updateFormData("theatreId", value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a theatre" />
                </SelectTrigger>
                <SelectContent>
                  {theatres?.map((theatre) => (
                    <SelectItem key={theatre._id} value={theatre._id}>
                      {theatre.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label>Location</Label>
              <Select
                value={formData.location}
                onValueChange={(value) => updateFormData("location", value)}
                disabled={!formData.theatreId}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a location" />
                </SelectTrigger>
                <SelectContent>
                  {locationOptions.map((location) => (
                    <SelectItem key={location.address} value={location.address}>
                      {location.address}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label>Hall Name</Label>
              <Input
                value={formData.name}
                onChange={(e) => updateFormData("name", e.target.value)}
                placeholder="Enter hall name"
                required
              />
            </div>

            <Button
              type="button"
              variant="outline"
              onClick={() => setLayoutDesignerOpen(true)}
              className="w-full"
            >
              Configure Layout
            </Button>
          </div>

          <Button
            type="submit"
            className="w-full"
            disabled={updateHallMutation.isPending}
          >
            {updateHallMutation.isPending ? "Updating..." : "Update Hall"}
          </Button>
        </form>

        <HallLayoutDesignerDialog
          open={layoutDesignerOpen}
          onOpenChange={setLayoutDesignerOpen}
          sections={sections}
          setSections={setSections}
        />
      </DialogContent>
    </Dialog>
  );
};

export default EditHallDialog;
import { MovieSectionProps } from "@/interfaces/IMovie";
import { useFetchAllMoviesByStatus } from "@/api/movieApi";
import MoviesGrid from "@/components/common/MoviesGrid";

const MovieSection = ({ variant }: MovieSectionProps) => {
  // Use the custom hook to fetch movies
  const { data: movies = [], isLoading, isError } = useFetchAllMoviesByStatus(variant);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (movies.length === 0) {
    return (
      <section className="flex justify-start w-full pl-[10vw]">
        <div className="flex flex-col items-center py-10 gap-12">
          <span className="w-full text-4xl text-primary font-semibold border-l-[6px] pl-2 flex items-center border-primary">
            {variant === "showing" ? "Now Showing" : "Upcoming Movies"}
          </span>
          <div className="text-gray-500 text-lg">
            No {variant === "showing" ? "now showing" : "upcoming"} movies
            available.
          </div>
        </div>
      </section>
    );
  }

  if (isError) {
    return <div>Error fetching movies. Please try again later.</div>;
  }

  return (
    <section className="flex justify-start w-full pl-[10vw]">
      <div className="flex flex-col py-10 gap-12 w-full">
        <span className="w-full text-4xl text-primary font-semibold border-l-[6px] pl-2 flex items-center border-primary">
          {variant === "showing" ? "Now Showing" : "Upcoming Movies"}
        </span>
        <div className="w-full overflow-x-auto">
          <MoviesGrid movies={movies} />
        </div>
      </div>
    </section>
  );
};

export default MovieSection;
import { AnimatedTooltip } from "@/components/shadcn/animated-tooltip";
import { Card } from "@/components/shadcn/card";

const Marquee = () => {
  const items = [
    {
      id: 1,
      name: "Esewa",
      designation: "Digital wallet company",
      image: "/esewa.png",
    },
    {
      id: 2,
      name: "Esewa",
      designation: "Digital wallet company",
      image: "/esewa.png",
    },
    {
      id: 3,
      name: "Esewa",
      designation: "Digital wallet company",
      image: "/esewa.png",
    },
    {
      id: 4,
      name: "Esewa",
      designation: "Digital wallet company",
      image: "/esewa.png",
    },
  ];

  return (
    <div className="flex justify-center p-3">
      <Card className="flex flex-col items-center gap-10 w-fit h-fit py-10 px-[calc(1vw+0.3rem)]">
        <span className="text-primary text-center w-full text-[calc(1vw+2rem)] font-semibold">
          Trusted by
        </span>
        <div className="flex p-10 ">
          <AnimatedTooltip items={items} />
        </div>
      </Card>
    </div>
  );
};

export default Marquee;
import { ReactNode } from "react";

const AdminLayout = ({ children }: { children: ReactNode }) => {
  return (
    <div className=" flex flex-col min-h-screen ">
      <div className="flex w-full bg-green-500">admin header</div>
      {children}
      <div className="flex w-full bg-green-500">admin footer</div>
    </div>
  );
};

export default AdminLayout;
import { ReactNode } from "react";

const NoneLayout = ({ children }: { children: ReactNode }) => {
  return <div className=" flex flex-col min-h-screen ">{children} </div>;
};

export default NoneLayout;
import ClientHeader from "../common/clientHeader";
import Footer from "../common/Footer";
import { ReactNode } from "react";

const UserLayout = ({ children }: { children: ReactNode }) => {
  return (
    <div className=" flex flex-col min-h-screen ">
      <ClientHeader />
      {children}
      <Footer />
    </div>
  );
};

export default UserLayout;
import React, { useState } from "react";
import { Movie } from "@/interfaces/IMovie";
import DominantColorExtractorCard from "../custom/ExpandingMovieCard";
import { Link } from "react-router-dom";

interface MoviesGridProps {
  movies: Movie[];
  gap?: number; // Gap in pixels
}

const MoviesGrid: React.FC<MoviesGridProps> = ({ gap = 0, movies }) => {
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);

  return (
    <div
      className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
      style={{
        gap: `${gap}px`,
      }}
    >
      {movies.map((movie, index) => (
        <div
          className=""
          key={movie._id}
          style={{
            position: "relative",
            zIndex: hoveredIndex === index ? 10 : 1,
            transition: "z-index 0ms",
          }}
          onMouseEnter={() => setHoveredIndex(index)}
          onMouseLeave={() => setHoveredIndex(null)}
        >
          <Link to={`movie/${movie.slug}`}>
          <DominantColorExtractorCard
            movie={movie}
            staticContentWidth="18vw"
            expandedContentWidth="21vw"
            totalContentWidth="39vw"
            minMaxHeight="47vh"
          />
          </Link>
        </div>
      ))}
    </div>
  );
};

export default MoviesGrid;
import React from 'react'

const Footer = () => {
  return (
    <div className='w-full bg-primary flex justify-center'>Footer</div>
  )
}

export default Footerimport { createContext, useContext, useEffect, useState } from "react"
 
type Theme = "dark" | "light" | "system"
 
type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}
 
type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}
 
const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
}
 
const ThemeProviderContext = createContext<ThemeProviderState>(initialState)
 
export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )
 
  useEffect(() => {
    const root = window.document.documentElement
 
    root.classList.remove("light", "dark")
 
    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light"
 
      root.classList.add(systemTheme)
      return
    }
 
    root.classList.add(theme)
  }, [theme])
 
  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }
 
  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}
 
export const useTheme = () => {
  const context = useContext(ThemeProviderContext)
 
  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider")
 
  return context
}import Ripple from "@/components/shadcn/ripple";

const Test = () => {
  return (
    <div className="bg-background min-h-screen w-full">
      <div className="relative flex min-h-screen w-full flex-col items-center justify-center overflow-hidden border md:shadow-xl">
        <div className="size-[150px]">
          <img src="src/assets/icons/logo/Logo.png" />
        </div>
        <Ripple />
      </div>
    </div>
  );
};

export default Test;
import { useState, useEffect, useMemo, useCallback, useRef } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormField,
  FormItem,
  FormMessage,
} from "@/components/shadcn/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/shadcn/select";
import {
  Dialog,
  DialogDescription,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from "@/components/shadcn/dialog";
import { Input } from "@/components/shadcn/input";
import { Button } from "@/components/shadcn/button";
import { Plus, X } from "lucide-react";
import {
  LocationFormData,
  LocationFormSchema,
} from "@/lib/formSchemas/distributorFormSchema/locationSchemas";

interface LocationDialogProps {
  onSave: (data: LocationFormData) => void;
  initialData?: LocationFormData;
  triggerText?: string;
  dialogTitle?: string;
  children?: React.ReactNode;
}

const LocationDialog = ({
  onSave,
  initialData,
  triggerText = initialData ? "Edit Locations" : "Add Locations",
  dialogTitle = initialData ? "Edit Locations" : "Add Locations",
  children,
}: LocationDialogProps) => {
  const idCounter = useRef(0);
  const [isOpen, setIsOpen] = useState(false);

  const generateLocationId = useCallback(() => {
    return `loc-${Date.now()}-${idCounter.current++}`;
  }, []);

  const defaultValues = useMemo((): LocationFormData => {
    if (initialData) {
      return {
        ...initialData,
        locations: initialData.locations.map((loc) => ({
          ...loc,
          type: loc.type === "HQ" ? "HQ" : "Branch",
        })),
      };
    }
    return {
      locations: [],
      contacts: { phoneNumbers: [], emails: [] },
    };
  }, [initialData]);

  const form = useForm<LocationFormData>({
    resolver: zodResolver(LocationFormSchema),
    defaultValues,
    mode: "onChange", // validate as the user types/changes fields
  });

  const { handleSubmit, reset, setValue, watch } = form;
  const locations = watch("locations") as LocationFormData["locations"];
  const phoneNumbers = watch("contacts.phoneNumbers");
  const emails = watch("contacts.emails");

  // Initialize form with one location and its contacts for new entries.
  useEffect(() => {
    if (isOpen && !initialData) {
      const newLocationId = generateLocationId();
      reset({
        locations: [
          {
            id: newLocationId,
            type: "Branch",
            location: "",
            coordinates: { latitude: "", longitude: "" },
          },
        ],
        contacts: {
          phoneNumbers: [
            {
              type: "INQUIRY",
              locationId: newLocationId,
              number: "",
            },
          ],
          emails: [
            {
              type: "INQUIRY",
              locationId: newLocationId,
              email: "",
            },
          ],
        },
      });
    }
  }, [isOpen, initialData, reset, generateLocationId]);

  const handleTypeChange = (index: number, newType: "HQ" | "Branch") => {
    const updatedLocations = locations.map((loc, i) => {
      if (i === index) {
        return {
          ...loc,
          type: newType,
        };
      }
      if (newType === "HQ" && loc.type === "HQ") {
        return {
          ...loc,
          type: "Branch" as "Branch" | "HQ",
        };
      }
      return loc;
    });
    setValue("locations", updatedLocations);
  };

  const hasHQ = locations.some((loc) => loc.type === "HQ");
  const onSubmit = (data: LocationFormData) => {
    onSave(data);
    setIsOpen(false);
    reset();
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        {children || (
          <Button variant="outline" size="sm">
            <Plus className="w-4 h-4 mr-2" />
            {triggerText}
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>{dialogTitle}</DialogTitle>
        </DialogHeader>
        <DialogDescription>
          Please fill out the details for the location.
        </DialogDescription>
        <Form {...form}>
          <form className="space-y-4">
            {/* Addresses Section */}
            <div className="space-y-4">
              <h4 className="font-medium">Addresses</h4>
              {locations.map((loc, index) => (
                <div
                  key={loc.id}
                  className="border p-4 rounded-md space-y-4 relative pt-12"
                >
                  <Button
                    variant="destructive"
                    className="absolute top-3 right-3"
                    onClick={() => {
                      const updatedLocations = locations.filter(
                        (_, i) => i !== index
                      );
                      setValue("locations", updatedLocations);
                      // Update contacts when location is removed
                      setValue(
                        "contacts.phoneNumbers",
                        phoneNumbers.filter((p) => p.locationId !== loc.id)
                      );
                      setValue(
                        "contacts.emails",
                        emails.filter((e) => e.locationId !== loc.id)
                      );
                    }}
                  >
                    <X />
                  </Button>
                  <div className="space-y-4">
                    <div className="flex justify-between gap-3">
                      <FormField
                        control={form.control}
                        name={`locations.${index}.type`}
                        render={({ field, fieldState }) => (
                          <FormItem>
                            <Select
                              value={field.value}
                              onValueChange={(value) => {
                                handleTypeChange(
                                  index,
                                  value as "HQ" | "Branch"
                                );
                                field.onChange(value);
                              }}
                            >
                              <SelectTrigger className="w-full">
                                <SelectValue placeholder="Type" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem
                                  value="HQ"
                                  disabled={hasHQ && loc.type !== "HQ"}
                                >
                                  HQ
                                </SelectItem>
                                <SelectItem value="Branch">Branch</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage>
                              {fieldState.error?.message}
                            </FormMessage>
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name={`locations.${index}.location`}
                        render={({ field, fieldState }) => (
                          <FormItem className="w-full">
                            <Input {...field} placeholder="Address" />
                            <FormMessage>
                              {fieldState.error?.message}
                            </FormMessage>
                          </FormItem>
                        )}
                      />
                    </div>
                    <h5 className="font-medium">Co-ordinates:</h5>
                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name={`locations.${index}.coordinates.latitude`}
                        render={({ field, fieldState }) => (
                          <FormItem>
                            <Input {...field} placeholder="Latitude" />
                            <FormMessage>
                              {fieldState.error?.message}
                            </FormMessage>
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name={`locations.${index}.coordinates.longitude`}
                        render={({ field, fieldState }) => (
                          <FormItem>
                            <Input {...field} placeholder="Longitude" />
                            <FormMessage>
                              {fieldState.error?.message}
                            </FormMessage>
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                </div>
              ))}
              <Button
                type="button"
                variant="outline"
                onClick={() => {
                  const newLocation = {
                    id: generateLocationId(),
                    type: "Branch" as "Branch" | "HQ",
                    location: "",
                    coordinates: { latitude: "", longitude: "" },
                  };
                  setValue("locations", [...locations, newLocation]);
                }}
              >
                <Plus /> Add Address
              </Button>
            </div>

            {/* Contacts Section */}
            <div className="space-y-4 border p-4 rounded-md">
              <h4 className="font-medium">Contacts</h4>
              <div className="space-y-3">
                <div className="flex items-center gap-2">
                  <h5 className="font-medium">Phone Numbers</h5>
                  <button
                    type="button"
                    onClick={() => {
                      const defaultLocationId = locations[0]?.id || "";
                      setValue("contacts.phoneNumbers", [
                        ...phoneNumbers,
                        {
                          type: "INQUIRY",
                          locationId: defaultLocationId,
                          number: "",
                        },
                      ]);
                    }}
                  >
                    <Plus size={15} />
                  </button>
                </div>
                {phoneNumbers.map((phone, index) => (
                  <div key={index} className="flex gap-2">
                    <FormField
                      control={form.control}
                      name={`contacts.phoneNumbers.${index}.type`}
                      render={({ field, fieldState }) => (
                        <FormItem>
                          <Select
                            value={field.value}
                            onValueChange={(value) => {
                              const updated = [...phoneNumbers];
                              updated[index].type = value as
                                | "INQUIRY"
                                | "SUPPORT";
                              field.onChange(value);
                              setValue("contacts.phoneNumbers", updated);
                            }}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="Type" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="INQUIRY">Inquiry</SelectItem>
                              <SelectItem value="SUPPORT">Support</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage>{fieldState.error?.message}</FormMessage>
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name={`contacts.phoneNumbers.${index}.locationId`}
                      render={({ field, fieldState }) => (
                        <FormItem>
                          <Select
                            value={field.value}
                            onValueChange={(value) => {
                              const updated = [...phoneNumbers];
                              updated[index].locationId = value;
                              field.onChange(value);
                              setValue("contacts.phoneNumbers", updated);
                            }}
                          >
                            <SelectTrigger className="">
                              <SelectValue placeholder="Address" />
                            </SelectTrigger>
                            <SelectContent>
                              {locations.map((loc) => (
                                <SelectItem key={loc.id} value={loc.id}>
                                  {loc.location || "Add a location above"}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage>{fieldState.error?.message}</FormMessage>
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name={`contacts.phoneNumbers.${index}.number`}
                      render={({ field, fieldState }) => (
                        <FormItem className="flex-1">
                          <Input {...field} placeholder="Phone Number" />
                          <FormMessage>{fieldState.error?.message}</FormMessage>
                        </FormItem>
                      )}
                    />
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() =>
                        setValue(
                          "contacts.phoneNumbers",
                          phoneNumbers.filter((_, i) => i !== index)
                        )
                      }
                    >
                      <X size={15} />
                    </Button>
                  </div>
                ))}
              </div>

              <div className="space-y-5">
                <div className="flex items-center gap-2">
                  <h5 className="font-medium">Emails</h5>
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      const defaultLocationId = locations[0]?.id || "";
                      setValue("contacts.emails", [
                        ...emails,
                        {
                          type: "INQUIRY",
                          locationId: defaultLocationId,
                          email: "",
                        },
                      ]);
                    }}
                  >
                    <Plus size={15} />
                  </Button>
                </div>
                {emails.map((email, index) => (
                  <div key={index} className="flex gap-2 items-center">
                    <FormField
                      control={form.control}
                      name={`contacts.emails.${index}.type`}
                      render={({ field, fieldState }) => (
                        <FormItem>
                          <Select
                            value={field.value}
                            onValueChange={(value) => {
                              const updated = [...emails];
                              updated[index].type = value as
                                | "INQUIRY"
                                | "SUPPORT";
                              field.onChange(value);
                              setValue("contacts.emails", updated);
                            }}
                          >
                            <SelectTrigger className="">
                              <SelectValue placeholder="Type" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="INQUIRY">Inquiry</SelectItem>
                              <SelectItem value="SUPPORT">Support</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage>{fieldState.error?.message}</FormMessage>
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name={`contacts.emails.${index}.locationId`}
                      render={({ field, fieldState }) => (
                        <FormItem>
                          <Select
                            value={field.value}
                            onValueChange={(value) => {
                              const updated = [...emails];
                              updated[index].locationId = value;
                              field.onChange(value);
                              setValue("contacts.emails", updated);
                            }}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="Address" />
                            </SelectTrigger>
                            <SelectContent>
                              {locations.map((loc) => (
                                <SelectItem key={loc.id} value={loc.id}>
                                  {loc.location || "Add a location above"}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage>{fieldState.error?.message}</FormMessage>
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name={`contacts.emails.${index}.email`}
                      render={({ field, fieldState }) => (
                        <FormItem className="flex-1">
                          <Input {...field} placeholder="Email Address" />
                          <FormMessage>{fieldState.error?.message}</FormMessage>
                        </FormItem>
                      )}
                    />
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() =>
                        setValue(
                          "contacts.emails",
                          emails.filter((_, i) => i !== index)
                        )
                      }
                    >
                      <X size={15} />
                    </Button>
                  </div>
                ))}
              </div>
            </div>

            <DialogFooter>
              <Button type="button" onClick={handleSubmit(onSubmit)} className="w-full">
                Save Location
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};

export default LocationDialog;
import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/shadcn/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/shadcn/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
  DialogDescription,
} from "@/components/shadcn/dialog";
import { Input } from "@/components/shadcn/input";
import { Button } from "@/components/shadcn/button";
import { Plus } from "lucide-react";
import { LocationItem } from "@/lib/formSchemas/distributorFormSchema/locationSchemas";
import {
  DistributionRightFormData,
  DistributionRightFormSchema,
} from "@/lib/formSchemas/distributorFormSchema/rightsSchema";
import { useFetchAllMovies } from "@/api/movieApi";

interface DistributionRightsDialogProps {
  onSave: (data: DistributionRightFormData) => void;
  addresses: LocationItem[];
  initialData?: DistributionRightFormData;
  triggerText?: string;
  dialogTitle?: string;
  children?: React.ReactNode;
}

const DistributionRightsDialog = ({
  onSave,
  addresses,
  initialData,
  triggerText = initialData
    ? "Edit Distribution Right"
    : "Add Distribution Rights",
  dialogTitle = initialData
    ? "Edit Distribution Right"
    : "Add Distribution Rights",
  children,
}: DistributionRightsDialogProps) => {
  const { data: movies = [] } = useFetchAllMovies();
  const defaultValues: DistributionRightFormData = initialData || {
    movieId: "",
    commissionRate: 0,
    territories: [],
    validFrom: "",
    validUntil: "",
  };

  const form = useForm<DistributionRightFormData>({
    resolver: zodResolver(DistributionRightFormSchema),
    defaultValues,
  });
  const { reset } = form;

  const [isOpen, setIsOpen] = useState(false);
  const [selectedTerritories, setSelectedTerritories] = useState<string[]>(
    defaultValues.territories
  );

  useEffect(() => {
    if (initialData) {
      setSelectedTerritories(initialData.territories);
    }
  }, [initialData]);

  const onDistributorSubmit = (data: DistributionRightFormData) => {
    onSave({ ...data, territories: selectedTerritories });
    setIsOpen(false);
    reset(defaultValues);
    setSelectedTerritories(defaultValues.territories);
  };

  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    e.stopPropagation();
    const data = form.getValues();
    onDistributorSubmit(data);
  };

  const availableLocations = addresses.filter(
    (loc) => loc.location.trim() !== ""
  );

  const today = new Date().toISOString().split("T")[0];
  const maxValidUntilDate = new Date();
  maxValidUntilDate.setDate(new Date().getDate() + 183);
  const maxDate = maxValidUntilDate.toISOString().split("T")[0];

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        {children || (
          <Button variant="outline" size="sm">
            <Plus className="w-4 h-4 mr-2" />
            {triggerText}
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="max-w-lg p-6">
        <DialogHeader>
          <DialogTitle>{dialogTitle}</DialogTitle>
        </DialogHeader>
        <DialogDescription>
          Please fill out the details for the distribution rights.
        </DialogDescription>
        <Form {...form}>
          <form onSubmit={handleFormSubmit} className="space-y-6">
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="movieId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Movie</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select movie" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {movies.map((movie) => (
                          <SelectItem key={movie._id} value={movie._id}>
                            {movie.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="commissionRate"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Commission Rate (%)</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        {...field}
                        onChange={(e) => {
                          let value = Number(e.target.value);
                          if (value < 0) value = 0;
                          if (value > 100) value = 100;
                          field.onChange(value);
                        }}
                        min="0"
                        max="100"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div>
              <FormLabel className="mb-2">Territories</FormLabel>
              <div className="flex flex-wrap gap-2 my-4">
                {availableLocations.length > 0 ? (
                  availableLocations.map((loc) => (
                    <div
                      key={loc.id}
                      className={`text-sm cursor-pointer rounded-full px-3 pt-1.5 pb-2 ${
                        selectedTerritories.includes(loc.location)
                          ? "bg-primary/40"
                          : "bg-secondary"
                      }`}
                      onClick={() =>
                        setSelectedTerritories((prev) =>
                          prev.includes(loc.location)
                            ? prev.filter((t) => t !== loc.location)
                            : [...prev, loc.location]
                        )
                      }
                    >
                      {loc.location}
                    </div>
                  ))
                ) : (
                  <span className="text-sm text-muted">
                    No locations available. Please add locations first.
                  </span>
                )}
              </div>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="validFrom"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Valid From</FormLabel>
                    <FormControl>
                      <Input type="date" min={today} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="validUntil"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Valid Until</FormLabel>
                    <FormControl>
                      <Input type="date" min={today} max={maxDate} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <DialogFooter>
              <Button
                type="submit"
                className="w-full"
                disabled={availableLocations.length === 0}
              >
                Save Distribution Rights
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};

export default DistributionRightsDialog;
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

import {
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/shadcn/form";
import { Input } from "@/components/shadcn/input";
import { Card, CardContent } from "@/components/shadcn/card";
import { Button } from "@/components/shadcn/button";
import { X } from "lucide-react";

import LocationDialog from "@/components/common/distributor/distributorForm/LocationDialog";
import DistributionRightsDialog from "./distributorRightsDialog";

import { LocationFormData } from "@/lib/formSchemas/distributorFormSchema/locationSchemas";
import {
  DistributorFormData,
  DistributorSchema,
} from "@/lib/formSchemas/distributorFormSchema/basicDetailsSchema";
import { DistributionRightFormData } from "@/lib/formSchemas/distributorFormSchema/rightsSchema";

import {
  useAddDistributor,
  useDistributorLogoUpload,
} from "@/api/distributorApi";
import ImageUploader from "../../ImageUploader";

const DistributorForm = () => {
  const [distributorData, setDistributorData] = useState<{
    id: string | null;
    distributorName: string | null;
  }>({ id: null, distributorName: null });
  const [locationData, setLocationData] = useState<LocationFormData>({
    locations: [],
    contacts: {
      phoneNumbers: [],
      emails: [],
    },
  });
  const [distributionRights, setDistributionRights] = useState<
    DistributionRightFormData[]
  >([]);
  const [showImageUpload, setShowImageUpload] = useState<boolean>(false);
  const { mutate: uploadDistributorLogo, isPending } =
    useDistributorLogoUpload();

  const form = useForm<DistributorFormData>({
    resolver: zodResolver(DistributorSchema),
    defaultValues: {
      name: "",
      commissionRate: 0,
      isActive: false,
    },
  });

  const { mutate: addDistributorMutation } = useAddDistributor();

  const onSubmit = (data: DistributorFormData) => {
    const transformedContacts = locationData.locations.map((loc) => {
      const phoneNumbersForLoc = locationData.contacts.phoneNumbers
        .filter((phone) => phone.locationId === loc.id)
        .map((phone) => ({
          type: phone.type.charAt(0).toUpperCase() + phone.type.slice(1),
          number: phone.number,
        }));

      const emailsForLoc = locationData.contacts.emails
        .filter((email) => email.locationId === loc.id)
        .map((email) => ({
          type: email.type.charAt(0).toUpperCase() + email.type.slice(1),
          email: email.email,
        }));

      return {
        location: loc.location,
        phoneNumbers: phoneNumbersForLoc,
        emails: emailsForLoc,
      };
    });

    // Prepare complete data for API
    const completeData = {
      name: data.name,
      commissionRate: data.commissionRate,
      isActive: data.isActive,
      locations: locationData.locations.map((loc) => ({
        type: loc.type,
        location: loc.location,
        coordinates: {
          latitude: parseFloat(loc.coordinates.latitude),
          longitude: parseFloat(loc.coordinates.longitude),
        },
      })),
      contacts: transformedContacts,
      distributionRights: distributionRights.map((right) => ({
        movieId: right.movieId,
        commissionRate: right.commissionRate,
        territories: right.territories,
        validFrom: right.validFrom,
        validUntil: right.validUntil,
      })),
    };

    // Submit to API
    addDistributorMutation(completeData, {
      onSuccess: (data) => {
        setDistributorData({
          id: data.distributor._id,
          distributorName: data.distributor.name,
        });
        setShowImageUpload(true);
      },
    });
  };

  const handleAddLocation = (data: LocationFormData) => {
    setLocationData({
      locations: [...locationData.locations, ...data.locations],
      contacts: {
        phoneNumbers: [
          ...locationData.contacts.phoneNumbers,
          ...data.contacts.phoneNumbers,
        ],
        emails: [...locationData.contacts.emails, ...data.contacts.emails],
      },
    });
  };

  const handleAddDistributionRight = (rightData: DistributionRightFormData) => {
    setDistributionRights([...distributionRights, rightData]);
  };

  const handleDeleteLocation = (locationId: string) => {
    setLocationData((prev) => ({
      locations: prev.locations.filter((loc) => loc.id !== locationId),
      contacts: {
        phoneNumbers: prev.contacts.phoneNumbers.filter(
          (phone) => phone.locationId !== locationId
        ),
        emails: prev.contacts.emails.filter(
          (email) => email.locationId !== locationId
        ),
      },
    }));
  };

  const handleDeleteDistributionRights = (indexToDelete: number) => {
    setDistributionRights((prev) =>
      prev.filter((_, index) => index !== indexToDelete)
    );
  };

  return (
    <Card className="w-full max-w-4xl mx-auto">
      {!showImageUpload && (
        <CardContent className="p-8">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              <div>
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Distributor Name</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div>
                <FormField
                  control={form.control}
                  name="commissionRate"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Commission Rate (%)</FormLabel>
                      <FormControl>
                        <Input
                          type="number"
                          {...field}
                          onChange={(e) => {
                            let value = Number(e.target.value);
                            if (value < 0) value = 0;
                            if (value > 100) value = 100;
                            field.onChange(value);
                          }}
                          min="0"
                          max="100"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div>
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-xl font-semibold">
                    Location and Contacts
                  </h3>
                  <LocationDialog onSave={handleAddLocation} />
                </div>
                <div className="flex flex-wrap gap-2">
                  <div className="flex flex-wrap gap-2">
                    {locationData.locations.map((location) => (
                      <div key={location.id} className="relative">
                        <LocationDialog
                          key={location.id}
                          onSave={(data: LocationFormData) => {
                            setLocationData((prev) => {
                              // Filter out old location and its contacts
                              const updatedLocations = prev.locations.map(
                                (loc) =>
                                  loc.id === location.id
                                    ? data.locations[0]
                                    : loc
                              );

                              const updatedPhoneNumbers =
                                prev.contacts.phoneNumbers
                                  .filter(
                                    (phone) => phone.locationId !== location.id
                                  )
                                  .concat(data.contacts.phoneNumbers);

                              const updatedEmails = prev.contacts.emails
                                .filter(
                                  (email) => email.locationId !== location.id
                                )
                                .concat(data.contacts.emails);

                              return {
                                locations: updatedLocations,
                                contacts: {
                                  phoneNumbers: updatedPhoneNumbers,
                                  emails: updatedEmails,
                                },
                              };
                            });
                          }}
                          initialData={{
                            locations: [location],
                            contacts: {
                              phoneNumbers:
                                locationData.contacts.phoneNumbers.filter(
                                  (phone) => phone.locationId === location.id
                                ),
                              emails: locationData.contacts.emails.filter(
                                (email) => email.locationId === location.id
                              ),
                            },
                          }}
                          triggerText=""
                          dialogTitle="Edit Location"
                        >
                          <div
                            className={`px-3 py-1 text-sm cursor-pointer rounded-full pb-2 ${
                              location.type === "HQ"
                                ? "bg-primary/40"
                                : "bg-secondary"
                            }`}
                          >
                            {location.location}{" "}
                            <span className="ml-2 text-xs">
                              ({location.type})
                            </span>
                          </div>
                        </LocationDialog>
                        <button
                          className="absolute -top-2.5 -right-0.5 bg-primary rounded-md"
                          onClick={() => handleDeleteLocation(location.id)}
                          title="Delete Location"
                        >
                          <X size={16} />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <div>
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-xl font-semibold">Distribution Rights</h3>
                  <DistributionRightsDialog
                    onSave={handleAddDistributionRight}
                    addresses={locationData.locations}
                  />
                </div>
                <div className="flex flex-wrap gap-2">
                  {distributionRights.map((right, index) => (
                    <div key={index} className=" relative">
                      <DistributionRightsDialog
                        key={index}
                        onSave={(updatedRight: DistributionRightFormData) => {
                          setDistributionRights((prev) =>
                            prev.map((r, i) => (i === index ? updatedRight : r))
                          );
                        }}
                        addresses={locationData.locations}
                        initialData={right}
                        triggerText=""
                        dialogTitle="Edit Distribution Right"
                      >
                        <div className="text-sm cursor-pointer bg-secondary rounded-2xl p-2">
                          <span className="ml-2 text-xs">
                            ({right.territories.join(", ")})
                          </span>
                        </div>
                      </DistributionRightsDialog>
                      <button
                        className="absolute -top-2.5 -right-0.5 bg-primary rounded-md"
                        onClick={() => handleDeleteDistributionRights(index)}
                        title="Delete Rights"
                      >
                        <X size={16} />
                      </button>
                    </div>
                  ))}
                </div>
              </div>

              <Button type="submit" className="w-full">
                Add Distributor
              </Button>
            </form>
          </Form>
        </CardContent>
      )}
      {showImageUpload && (
        <CardContent className="flex justify-center p-5">
          <ImageUploader
            uploadFn={({ image }) =>
              uploadDistributorLogo({
                distributorId: distributorData.id || "",
                image,
              })
            }
            fallbackText={distributorData.distributorName || ""}
            isUploading={isPending}
            buttonText={"Distributor Logo"}
          />
        </CardContent>
      )}
    </Card>
  );
};

export default DistributorForm;
import { useState } from "react";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/shadcn/table";

import { Card, CardContent } from "@/components/shadcn/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/shadcn/select";
import { Button } from "@/components/shadcn/button";
import { Edit, Trash2, MapPin, Phone, Mail } from "lucide-react";

import AlertDialog from "../AlertDialog";

import {
  useDeleteDistributor,
  useFetchAllDistributors,
} from "@/api/distributorApi";

type FilterStatus = "all" | "active" | "inactive";

export default function DistributorsTable() {
  const [filter, setFilter] = useState<FilterStatus>("active");
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [selectedDistributorId, setSelectedDistributorId] = useState<
    string | null
  >(null);

  // API hooks
  const { data, isLoading, error } = useFetchAllDistributors();
  const deleteDistributorMutation = useDeleteDistributor();

  // Get distributors array from the response
  const distributors = data || [];

  const filteredDistributors = distributors.filter((dist) => {
    if (filter === "all") return true;
    if (filter === "active") return dist.isActive;
    if (filter === "inactive") return !dist.isActive;
    return false;
  });

  const handleDeleteClick = (distributorId: string) => {
    setSelectedDistributorId(distributorId);
    setDeleteDialogOpen(true);
  };

  const handleDeleteConfirm = async () => {
    if (selectedDistributorId) {
      await deleteDistributorMutation.mutateAsync(selectedDistributorId);
      setDeleteDialogOpen(false);
      setSelectedDistributorId(null);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center p-8">Loading distributors...</div>
    );
  }

  if (error) {
    return (
      <div className="text-red-600 p-4">
        Error loading distributors: {error.message}
      </div>
    );
  }

  return (
    <div className="space-y-4 max-w-6xl mx-auto p-4">
      {/* Header with Filter */}
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-2xl font-bold">Distributors</h2>
        <Select
          value={filter}
          onValueChange={(value) => setFilter(value as FilterStatus)}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Select filter" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All</SelectItem>
            <SelectItem value="active">Active</SelectItem>
            <SelectItem value="inactive">Inactive</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Card Container */}
      <Card className="shadow-lg">
        <CardContent className="p-4 overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-16">S.N.</TableHead>
                <TableHead>Distributor</TableHead>
                <TableHead>Locations</TableHead>
                <TableHead>Contact Info</TableHead>
                <TableHead>Commission Rate</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>

            <TableBody>
              {filteredDistributors.length > 0 ? (
                filteredDistributors.map((dist, index) => (
                  <TableRow key={dist._id}>
                    <TableCell>{index + 1}</TableCell>
                    <TableCell>
                      <div className="flex items-center space-x-3">
                        {dist.logo_URL && (
                          <img
                            src={dist.logo_URL}
                            alt={`${dist.name} logo`}
                            className="w-10 h-10 rounded-full object-cover"
                          />
                        )}
                        <span className="font-medium">{dist.name}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex flex-col gap-1">
                        {dist.locations.map((loc, i) => (
                          <div key={i} className="flex items-center text-sm">
                            <MapPin
                              className={`h-4 w-4 mr-1 ${
                                loc.type === "HQ"
                                  ? "text-primary"
                                  : "text-gray-600"
                              }`}
                            />
                            <span>
                              {loc.type}: {loc.location}
                            </span>
                          </div>
                        ))}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex flex-col gap-5">
                        {dist.contacts.map((contact, i) => (
                          <div key={i} className="text-sm">
                            <div className="font-medium text-primary/80">
                              {contact.location}
                            </div>
                            {contact.phoneNumbers.length > 0 && (
                              <div className="flex items-center">
                                <Phone className="h-3 w-3 mr-1 text-gray-600" />
                                <span>{contact.phoneNumbers[0].number}</span>
                              </div>
                            )}
                            {contact.emails.length > 0 && (
                              <div className="flex items-center">
                                <Mail className="h-3 w-3 mr-1 text-gray-600" />
                                <span>{contact.emails[0].email}</span>
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </TableCell>
                    <TableCell>{dist.commissionRate}%</TableCell>
                    <TableCell className="text-right space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          // TODO: implement edit functionality
                        }}
                      >
                        <Edit className="h-4 w-4" />
                        <span>Edit</span>
                      </Button>

                      <Button
                        variant="destructive"
                        size="sm"
                        onClick={() => handleDeleteClick(dist._id)}
                        disabled={deleteDistributorMutation.isPending}
                      >
                        <Trash2 className="h-4 w-4" />
                        <span>Delete</span>
                      </Button>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={6} className="text-center py-4">
                    No distributors found.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Delete Confirmation Dialog */}
      <AlertDialog
        isOpen={deleteDialogOpen}
        onClose={() => setDeleteDialogOpen(false)}
        onConfirm={handleDeleteConfirm}
        description="This action cannot be undone. This will permanently remove this distributor and their data from our servers."
        isProcessing={deleteDistributorMutation.isPending}
        actionText="Delete Distributor"
        processingText="Deleting"
      />
    </div>
  );
}
import { Link, useNavigate } from "react-router-dom";
import { Button } from "../shadcn/button";
import { ModeToggle } from "../shadcn/theme-toggle";
import Menu from "../custom/ClientNavMenu";
import { useAuth } from "@/hooks/useAuth";
import { getNameInitials } from "@/utils/getNameInitials";
import { MapPin } from "lucide-react";

const ClientHeader = () => {
  const { user, isAuthenticated } = useAuth();
  const navigate = useNavigate();
  const menuCfg = [
    { title: "Home", href: "/" },
    { title: "About Us", href: "/about" },
    { title: "Support", href: "/support" },
  ];

  return (
    <header className="absolute top-0 w-full flex justify-between z-10 p-4 space-x-4">
      <div className=" place-content-center md:basis-[10%] shrink-0">
        <Link to={"/"}>
          <img src="src/assets/icons/logo/Logo.png" alt="ClickEt" width={50} />
        </Link>
      </div>
      <div className="hidden sm:flex gap-1.5 max-sm:pl-0  items-center border-primary">
        <button className="py-4 text-white flex gap-2 bg-secondary rounded-md items-center px-4">
          <MapPin size={22} className="text-primary" />
          <span className="hidden md:block text-primary hover:underline">
            Kathmandu
          </span>
        </button>
        <Menu config={menuCfg} />
      </div>
      <div className="space-x-2.5 flex justify-end items-center">
        <ModeToggle />
        {!isAuthenticated && (
          <div className="hidden sm:flex sm:flex-col md:flex-row gap-3 ">
            <Button
              onClick={() => {
                navigate("/login");
              }}
            >
              Sign in
            </Button>
            <Button
              onClick={() => {
                navigate("/register");
              }}
            >
              Register
            </Button>
          </div>
        )}
        {isAuthenticated && (
          <Link to={"/uprofile"}>
            <div className="rounded-full size-10 center bg-primary text-white cursor-pointer overflow-hidden">
              <img
                className="bg-primary"
                src={user?.profile_URL}
                alt={getNameInitials(user?.full_name || "")}
              />
            </div>
          </Link>
        )}
      </div>
    </header>
  );
};

export default ClientHeader;
import { useState } from "react";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/shadcn/table";

import { Card, CardContent } from "@/components/shadcn/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/shadcn/select";
import { Button } from "@/components/shadcn/button";
import { Edit, Trash2, Phone, Mail, MapPin } from "lucide-react";

import AlertDialog from "../AlertDialog";

import { useDeleteTheatre, useFetchAllTheatres } from "@/api/theatreApi";

type FilterStatus = "all" | "active" | "inactive";

export default function TheatresTable() {
  const [filter, setFilter] = useState<FilterStatus>("active");
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [selectedTheatreId, setSelectedTheatreId] = useState<string | null>(
    null
  );

  // API hooks
  const { data, isLoading, error } = useFetchAllTheatres();
  const deleteTheatreMutation = useDeleteTheatre();

  // Get theatres array from the response
  const theatres = data || [];

  const filteredDistributors = theatres.filter((theatre) => {
    if (filter === "all") return true;
    if (filter === "active") return theatre.isActive;
    if (filter === "inactive") return !theatre.isActive;
    return false;
  });

  const handleDeleteClick = (theatreId: string) => {
    setSelectedTheatreId(theatreId);
    setDeleteDialogOpen(true);
  };

  const handleDeleteConfirm = async () => {
    if (selectedTheatreId) {
      await deleteTheatreMutation.mutateAsync(selectedTheatreId);
      setDeleteDialogOpen(false);
      setSelectedTheatreId(null);
    }
  };

  if (isLoading) {
    return <div className="flex justify-center p-8">Loading theatres...</div>;
  }

  if (error) {
    return (
      <div className="text-red-600 p-4">
        Error loading theatres: {error.message}
      </div>
    );
  }

  return (
    <div className="space-y-4 max-w-6xl mx-auto p-4">
      {/* Header with Filter */}
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-2xl font-bold">Theatres</h2>
        <Select
          value={filter}
          onValueChange={(value) => setFilter(value as FilterStatus)}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Select filter" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All</SelectItem>
            <SelectItem value="active">Active</SelectItem>
            <SelectItem value="inactive">Inactive</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Card Container */}
      <Card className="shadow-lg">
        <CardContent className="p-4 overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-16">S.N.</TableHead>
                <TableHead>Theatre</TableHead>
                <TableHead>Locations</TableHead>
                <TableHead>Contact Info</TableHead>
                <TableHead>Commission Rate</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>

            <TableBody>
              {filteredDistributors.length > 0 ? (
                filteredDistributors.map((theatre, index) => (
                  <TableRow key={theatre._id}>
                    <TableCell>{index + 1}</TableCell>
                    <TableCell>
                      <div className="flex items-center space-x-3">
                        <span className="font-medium">{theatre.name}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex flex-col gap-1">
                        {theatre.locations.map((loc, i) => (
                          <div key={i} className="flex items-center gap-2 text-sm">
                            <MapPin />
                            <span>{loc.address}</span>
                          </div>
                        ))}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex flex-col gap-5">
                        {theatre.contacts.map((contact, i) => (
                          <div key={i} className="text-sm">
                            <div className="font-medium text-primary/80">
                              {contact.location}
                            </div>
                            {contact.phoneNumbers.length > 0 && (
                              <div className="flex items-center">
                                <Phone className="h-3 w-3 mr-1 text-gray-600" />
                                <span>{contact.phoneNumbers[0].number}</span>
                              </div>
                            )}
                            {contact.emails.length > 0 && (
                              <div className="flex items-center">
                                <Mail className="h-3 w-3 mr-1 text-gray-600" />
                                <span>{contact.emails[0].email}</span>
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </TableCell>
                    <TableCell>
                      {/* {theatre.commissionRate}% */}
                      rohan%
                    </TableCell>
                    <TableCell className="text-right space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          // TODO: implement edit functionality
                        }}
                      >
                        <Edit className="h-4 w-4" />
                        <span>Edit</span>
                      </Button>

                      <Button
                        variant="destructive"
                        size="sm"
                        onClick={() => handleDeleteClick(theatre._id)}
                        disabled={deleteTheatreMutation.isPending}
                      >
                        <Trash2 className="h-4 w-4" />
                        <span>Delete</span>
                      </Button>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={6} className="text-center py-4">
                    No theatres found.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Delete Confirmation Dialog */}
      <AlertDialog
        isOpen={deleteDialogOpen}
        onClose={() => setDeleteDialogOpen(false)}
        onConfirm={handleDeleteConfirm}
        description="This action cannot be undone. This will permanently remove this distributor and their data from our servers."
        isProcessing={deleteTheatreMutation.isPending}
        actionText="Delete Distributor"
        processingText="Deleting"
      />
    </div>
  );
}
import React, { useEffect } from "react";
import { useForm, Controller, useFieldArray } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/shadcn/dialog";
import { Input } from "@/components/shadcn/input";
import { Button } from "@/components/shadcn/button";
import { Label } from "@/components/shadcn/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/shadcn/select";
import { X, Plus } from "lucide-react";

const locationSchema = z.object({
  address: z.string().min(1, "Address is required"),
  coordinates: z.object({
    latitude: z.string().min(1, "Latitude is required"),
    longitude: z.string().min(1, "Longitude is required"),
  }),
  commissionRate: z.preprocess(
    (val) => Number(val),
    z.number().min(0, "Commission rate must be at least 0").max(100, "Commission rate must be at most 100")
  ),
  phones: z.array(
    z.object({
      type: z.enum(["INQUIRY", "SUPPORT"]),
      number: z.string().min(1, "Phone number is required"),
    })
  ).min(1, "At least one phone number is required"),
  emails: z.array(
    z.object({
      type: z.enum(["INQUIRY", "SUPPORT"]),
      email: z.string().email("Invalid email address"),
    })
  ).min(1, "At least one email address is required"),
});

type Location = z.infer<typeof locationSchema>;

interface TheatreLocationDialogProps {
  open: boolean;
  onClose: () => void;
  onSave: (location: Location) => void;
  initialData?: Location;
}

const TheatreLocationDialog: React.FC<TheatreLocationDialogProps> = ({
  open,
  onClose,
  onSave,
  initialData,
}) => {
  const {
    control,
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<Location>({
    resolver: zodResolver(locationSchema),
    defaultValues: initialData || {
      address: "",
      coordinates: { latitude: "", longitude: "" },
      commissionRate: 0,
      phones: [{ type: "INQUIRY", number: "" }],
      emails: [{ type: "INQUIRY", email: "" }],
    },
  });

  useEffect(() => {
    if (initialData) {
      reset(initialData);
    } else {
      reset({
        address: "",
        coordinates: { latitude: "", longitude: "" },
        commissionRate: 0,
        phones: [{ type: "INQUIRY", number: "" }],
        emails: [{ type: "INQUIRY", email: "" }],
      });
    }
  }, [initialData, open, reset]);

  const {
    fields: phoneFields,
    append: appendPhone,
    remove: removePhone,
  } = useFieldArray({
    control,
    name: "phones",
  });

  const {
    fields: emailFields,
    append: appendEmail,
    remove: removeEmail,
  } = useFieldArray({
    control,
    name: "emails",
  });

  const onSubmit = (data: Location) => {
    onSave(data);
    onClose();
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[70vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {initialData ? "Edit Location" : "Add Location"}
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* Addresses Section */}
          <div className="border px-4 pb-6 rounded-lg">
            <h3 className="text-2xl mt-2 mb-4 text-primary font-semibold">
              Addresses
            </h3>

            <div className="space-y-4">
              <div>
                <Label>Address</Label>
                <Input {...register("address")} />
                {errors.address && (
                  <p className="text-red-500 text-sm">{errors.address.message}</p>
                )}
              </div>

              <div className="grid grid-cols-3 gap-4">
                <div>
                  <Label>Latitude</Label>
                  <Input {...register("coordinates.latitude")} />
                  {errors.coordinates?.latitude && (
                    <p className="text-red-500 text-sm">
                      {errors.coordinates.latitude.message}
                    </p>
                  )}
                </div>
                <div>
                  <Label>Longitude</Label>
                  <Input {...register("coordinates.longitude")} />
                  {errors.coordinates?.longitude && (
                    <p className="text-red-500 text-sm">
                      {errors.coordinates.longitude.message}
                    </p>
                  )}
                </div>
                <div>
                  <Label>Commission Rate (%)</Label>
                  <Input
                    type="number"
                    {...register("commissionRate", { valueAsNumber: true })}
                  />
                  {errors.commissionRate && (
                    <p className="text-red-500 text-sm">
                      {errors.commissionRate.message}
                    </p>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Contacts Section */}
          <div className="border px-4 pb-6 rounded-lg">
            <h3 className="text-2xl mt-2 mb-4 text-primary font-semibold">
              Contacts
            </h3>
            <div className="space-y-3">
              <div className="flex gap-2 items-center">
                <Label>Phone Numbers:</Label>
                <button
                  type="button"
                  onClick={() => appendPhone({ type: "INQUIRY", number: "" })}
                  className="flex items-center gap-2 bg-primary p-1 rounded-sm"
                >
                  <Plus className="w-4 h-4" />
                </button>
              </div>
              {phoneFields.map((field, index) => (
                <div key={field.id} className="flex gap-2 items-center">
                  <Controller
                    control={control}
                    name={`phones.${index}.type`}
                    render={({ field }) => (
                      <Select value={field.value} onValueChange={field.onChange}>
                        <SelectTrigger className="w-[120px]">
                          <SelectValue placeholder="Select type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="INQUIRY">Inquiry</SelectItem>
                          <SelectItem value="SUPPORT">Support</SelectItem>
                        </SelectContent>
                      </Select>
                    )}
                  />
                  <Input
                    {...register(`phones.${index}.number` as const)}
                    placeholder="Phone number"
                    className="flex-1"
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    onClick={() => removePhone(index)}
                  >
                    <X className="w-4 h-4" />
                  </Button>
                  {errors.phones?.[index]?.number && (
                    <p className="text-red-500 text-sm">
                      {errors.phones[index]?.number?.message}
                    </p>
                  )}
                </div>
              ))}
              {errors.phones && typeof errors.phones.message === "string" && (
                <p className="text-red-500 text-sm">{errors.phones.message}</p>
              )}
            </div>

            <div className="space-y-4 mt-8">
              <div className="flex gap-3 items-center">
                <Label>Emails:</Label>
                <button
                  type="button"
                  onClick={() => appendEmail({ type: "INQUIRY", email: "" })}
                  className="flex items-center gap-2 bg-primary p-1 rounded-sm"
                >
                  <Plus className="w-4 h-4" />
                </button>
              </div>
              {emailFields.map((field, index) => (
                <div key={field.id} className="flex gap-2 items-center">
                  <Controller
                    control={control}
                    name={`emails.${index}.type`}
                    render={({ field }) => (
                      <Select value={field.value} onValueChange={field.onChange}>
                        <SelectTrigger className="w-[120px]">
                          <SelectValue placeholder="Select type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="INQUIRY">Inquiry</SelectItem>
                          <SelectItem value="SUPPORT">Support</SelectItem>
                        </SelectContent>
                      </Select>
                    )}
                  />
                  <Input
                    {...register(`emails.${index}.email` as const)}
                    placeholder="Email address"
                    className="flex-1"
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    onClick={() => removeEmail(index)}
                  >
                    <X className="w-4 h-4" />
                  </Button>
                  {errors.emails?.[index]?.email && (
                    <p className="text-red-500 text-sm">
                      {errors.emails[index]?.email?.message}
                    </p>
                  )}
                </div>
              ))}
              {errors.emails && typeof errors.emails.message === "string" && (
                <p className="text-red-500 text-sm">{errors.emails.message}</p>
              )}
            </div>
          </div>

          <Button
            className="w-full bg-red-500 hover:bg-red-600 text-white"
            type="submit"
          >
            {initialData ? "Update Location" : "Save Location"}
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default TheatreLocationDialog;
import { useState } from "react";
import { useForm, useFieldArray, FieldErrors } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { toast } from "sonner";

import { Input } from "@/components/shadcn/input";
import { Button } from "@/components/shadcn/button";
import { Label } from "@/components/shadcn/label";
import { X, Plus, Edit } from "lucide-react";
import TheatreLocationDialog from "./TheatreLocationDialog";
import { useAddTheatre } from "@/api/theatreApi";

const locationSchema = z.object({
  address: z.string().min(1, "Address is required"),
  coordinates: z.object({
    latitude: z.string().min(1, "Latitude is required"),
    longitude: z.string().min(1, "Longitude is required"),
  }),
  commissionRate: z.preprocess(
    (val) => Number(val),
    z
      .number()
      .min(0, "Commission rate must be at least 0")
      .max(100, "Commission rate must be at most 100")
  ),
  phones: z.array(
    z.object({
      type: z.enum(["INQUIRY", "SUPPORT"]),
      number: z
        .string()
        .min(1, "Phone number is required")
        .regex(/^(?:\+977[- ]?)?\d{10}$/, "Invalid Nepali phone number format"),
    })
  ),
  emails: z.array(
    z.object({
      type: z.enum(["INQUIRY", "SUPPORT"]),
      email: z.string().email("Invalid email address"),
    })
  ),
});

type Location = z.infer<typeof locationSchema>;

const theatreFormSchema = z.object({
  name: z.string().min(1, "Theater name is required"),
  locations: z
    .array(locationSchema)
    .min(1, "At least one location is required"),
  contacts: z.array(
    z.object({
      location: z.string(),
      phoneNumbers: z.array(
        z.object({
          type: z.string(),
          number: z.string(),
        })
      ),
      emails: z.array(
        z.object({
          type: z.string(),
          email: z.string(),
        })
      ),
    })
  ),
  hallIds: z.array(z.string()),
  commissionRate: z.array(
    z.object({
      address: z.string(),
      rate: z.number(),
    })
  ),
  isActive: z.boolean(),
});

type TheatreFormData = z.infer<typeof theatreFormSchema>;

export type FinalTheatreData = {
  name: string;
  locations: {
    address: string;
    coordinates: {
      latitude: number;
      longitude: number;
    };
  }[];
  contacts: {
    location: string;
    phoneNumbers: {
      type: string;
      number: string;
    }[];
    emails: {
      type: string;
      email: string;
    }[];
  }[];
  commissionRate: {
    address: string;
    rate: number;
  }[];
  isActive: boolean;
};

const TheatreForm = () => {
  const {
    register,
    control,
    handleSubmit,
    formState: { errors },
  } = useForm<TheatreFormData>({
    resolver: zodResolver(theatreFormSchema),
    defaultValues: {
      name: "",
      locations: [],
      contacts: [],
      hallIds: [],
      commissionRate: [],
      isActive: true,
    },
  });

  const { fields, append, update, remove } = useFieldArray({
    control,
    name: "locations",
  });

  const [isLocationDialogOpen, setIsLocationDialogOpen] = useState(false);
  const [editingLocation, setEditingLocation] = useState<{
    index: number;
    location: Location;
  } | null>(null);

  const handleOpenLocationDialog = (index?: number) => {
    if (index !== undefined) {
      setEditingLocation({ index, location: fields[index] });
    } else {
      setEditingLocation(null);
    }
    setIsLocationDialogOpen(true);
  };

  const handleCloseLocationDialog = () => {
    setIsLocationDialogOpen(false);
    setEditingLocation(null);
  };

  const onLocationSave = (location: Location) => {
    if (editingLocation !== null) {
      update(editingLocation.index, location);
    } else {
      append(location);
    }
    handleCloseLocationDialog();
  };

  // ----------------------------------------------------------------
  // 4. Error handling for invalid form
  // ----------------------------------------------------------------
  const onInvalid = (formErrors: FieldErrors<TheatreFormData>) => {
    if (formErrors.locations) {
      toast.error(
        formErrors.locations.message || "Please add at least one valid location"
      );
    } else {
      toast.error("Please check the form for errors.");
    }
  };

  const { mutate: addTheatre } = useAddTheatre();

  const handleFinalSubmit = (data: TheatreFormData) => {
    const finalData: FinalTheatreData = {
      name: data.name,
      locations: data.locations.map((loc) => ({
        address: loc.address,
        coordinates: {
          latitude: parseFloat(loc.coordinates.latitude),
          longitude: parseFloat(loc.coordinates.longitude),
        },
      })),
      contacts: data.locations.map((loc) => ({
        location: loc.address,
        phoneNumbers: loc.phones.map((phone) => ({
          type: phone.type, // replicate your example's spacing
          number: phone.number,
        })),
        emails: loc.emails.map((email) => ({
          type: email.type,
          email: email.email,
        })),
      })),
      commissionRate: data.locations.map((loc) => ({
        address: loc.address,
        rate: loc.commissionRate,
      })),
      isActive: data.isActive,
    };

    // Pass final structure to parent or API
    addTheatre(finalData);
  };

  return (
    <div className="w-full max-w-2xl p-6 space-y-6 bg-background rounded-lg border">
      {/* Name Field */}
      <div className="space-y-4">
        <Label htmlFor="theatreName">Theater Name</Label>
        <Input id="theatreName" {...register("name")} className="w-full" />
        {errors.name && (
          <p className="text-red-500 text-sm">{errors.name.message}</p>
        )}
      </div>

      {/* Locations & Contacts */}
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h2 className="text-lg font-semibold">Location and Contacts</h2>
          <Button
            variant="outline"
            onClick={() => handleOpenLocationDialog()}
            className="flex items-center gap-2"
          >
            <Plus className="w-4 h-4" /> Add Location
          </Button>
        </div>

        <div className="flex flex-wrap gap-2">
          {fields.map((location, index) => (
            <div
              key={location.id}
              className="flex items-center gap-2 px-3 py-1.5 bg-secondary rounded-full group cursor-pointer"
            >
              <span
                onClick={() => handleOpenLocationDialog(index)}
                className="flex items-center gap-2"
              >
                {location.address}
                <Edit className="w-3 h-3 opacity-0 group-hover:opacity-100 transition-opacity" />
              </span>
              <button
                onClick={() => remove(index)}
                className="text-muted-foreground hover:text-foreground ml-1"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          ))}
        </div>
        {errors.locations && (
          <p className="text-red-500 text-sm">{errors.locations.message}</p>
        )}
      </div>

      {/* Submit Button */}
      <Button
        className="w-full bg-primary hover:bg-primary/80 text-white"
        onClick={handleSubmit(handleFinalSubmit, onInvalid)}
      >
        Add Theater
      </Button>

      <p className="text-sm text-muted-foreground">
        NOTE: To associate halls with this theatre,{" "}
        <button className="text-red-500 hover:underline">Click here</button>
      </p>

      {/* Location Dialog */}
      <TheatreLocationDialog
        open={isLocationDialogOpen}
        onClose={handleCloseLocationDialog}
        onSave={onLocationSave}
        initialData={editingLocation?.location}
      />
    </div>
  );
};

export default TheatreForm;
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/shadcn/button";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/shadcn/card"; 

interface IErrorFallbackProps {
  resetErrorBoundary: (...args: unknown[]) => void;
}

const ErrorFallback = ({ resetErrorBoundary }: IErrorFallbackProps) => {
  const navigate = useNavigate();

  return (
    <div className="flex items-center justify-center min-h-screen bg-background p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center text-destructive">
            Oops! Something went wrong.
          </CardTitle>
          <CardDescription className="text-center text-muted-foreground">
            We encountered an error. Please try again or go back to the home
            page.
          </CardDescription>
        </CardHeader>
        <CardFooter className="flex justify-center gap-4">
          <Button variant="destructive" onClick={() => resetErrorBoundary()}>
            Try Again
          </Button>
          <Button
            variant="outline"
            onClick={() => {
              navigate("/", { replace: true });
              window.location.reload();
            }}
          >
            Go Home
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
};

export default ErrorFallback;
interface DialogProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  isProcessing?: boolean;
  title?: string;
  description?: string;
  actionText?: string;
  processingText?: string;
}

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "../shadcn/alert-dialog";

const DeleteDialog = ({
  isOpen,
  onClose,
  onConfirm,
  isProcessing,
  title = "Are you sure?",
  description = "This action cannot be undone. This will permanently delete the item and remove its data from our servers.",
  actionText = "Delete",
  processingText = "Deleting",
}: DialogProps) => {
  return (
    <AlertDialog open={isOpen}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>{title}</AlertDialogTitle>
          <AlertDialogDescription>{description}</AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel onClick={onClose} disabled={isProcessing}>
            Cancel
          </AlertDialogCancel>
          <AlertDialogAction
            onClick={onConfirm}
            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            disabled={isProcessing}
          >
            {isProcessing ? `${processingText}...` : actionText}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
};

export default DeleteDialog;
import { useState, useRef, DragEvent, ChangeEvent } from "react";
import { Button } from "@/components/shadcn/button";
import { Card } from "@/components/shadcn/card";
import { Upload, X } from "lucide-react";
import { ImageFile } from "@/interfaces/auth/IImage";

interface ImageUploaderProps {
  uploadFn: (params: { image: ImageFile; currentImageUrl?: string }) => void;
  imageURL?: string;
  fallbackText: string;
  isUploading?: boolean;

  buttonText: string;
}

const ImageUploader = ({
  uploadFn,
  imageURL,
  fallbackText,
  isUploading = false,
  buttonText,
}: ImageUploaderProps) => {
  const [dragActive, setDragActive] = useState<boolean>(false);
  const [image, setImage] = useState<ImageFile | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Handle drag events
  const handleDrag = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(e.type === "dragenter" || e.type === "dragover");
  };

  // Handle drop events
  const handleDrop = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    const file = e.dataTransfer.files[0];
    if (file?.type.startsWith("image/")) setImage(file);
  };

  // Handle file input change
  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file?.type.startsWith("image/")) setImage(file);
  };

  // Handle image upload
  const handleUpload = () => {
    if (!image) {
      alert("Please select an image to upload.");
      return;
    }

    uploadFn({ image, currentImageUrl: imageURL });
  };

  // Handle image removal
  const handleRemove = () => {
    setImage(null);
    setDragActive(false);
    if (inputRef.current) inputRef.current.value = "";
  };

  return (
    <Card className="w-96 h-96 flex flex-col items-center justify-center gap-12 p-6">
      <div
        className={`relative w-64 h-64 rounded-full overflow-hidden ${
          dragActive
            ? "before:absolute before:inset-0 before:rounded-full before:border-4 before:border-primary before:animate-pulse before:z-10"
            : ""
        }`}
        onDragEnter={handleDrag}
        onDragLeave={handleDrag}
        onDragOver={handleDrag}
        onDrop={handleDrop}
      >
        <input
          ref={inputRef}
          type="file"
          className="hidden"
          accept="image/*"
          onChange={handleChange}
        />

        {!image && (!imageURL || imageURL === "null") && (
          <div className="w-full h-full bg-primary center text-white text-8xl">
            {fallbackText}
          </div>
        )}

        {!image && imageURL && imageURL !== "null" && (
          <img
            src={imageURL}
            alt={fallbackText}
            className="w-full h-full object-cover"
          />
        )}

        {image && (
          <div className="relative w-full h-full">
            <img
              src={URL.createObjectURL(image)}
              alt="Preview"
              className="w-full h-full object-cover"
            />
            <button
              onClick={handleRemove}
              className="absolute top-2 right-2 p-1 bg-white rounded-full shadow-lg"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        )}

        <div
          className="absolute inset-0 flex items-center justify-center bg-primary/0 hover:bg-primary/80 transition-colors group cursor-pointer"
          onClick={() => inputRef.current?.click()}
        >
          <div className="opacity-0 group-hover:opacity-100 text-white text-center p-4">
            <Upload className="w-8 h-8 mx-auto mb-2" />
            <p>Drop image here or click to upload</p>
          </div>
        </div>

        {(dragActive || image) && (
          <div
            onClick={handleRemove}
            className="absolute bottom-2 left-1/2 -translate-x-1/2 px-2 py-1 bg-secondary hover:bg-primary text-sm font-medium rounded-sm shadow-lg transition-colors"
          >
            <X />
          </div>
        )}
      </div>

      <Button
        onClick={handleUpload}
        disabled={!image || isUploading}
        className="w-full"
      >
        {isUploading ? "Updating..." : `Update ${buttonText}`}
      </Button>
    </Card>
  );
};

export default ImageUploader;
import React, { useState, useCallback, useMemo } from "react";
import { ColorExtractor } from "react-color-extractor";
import { format } from "date-fns";
import { Ticket } from "lucide-react";
import { useNavigate } from "react-router-dom";
import InteractiveHoverButton from "@/components/shadcn/interactive-hover-button";
import { Movie } from "@/interfaces/IMovie";

interface ExpandingCardProps {
  staticContentWidth?: string;
  expandedContentWidth?: string;
  totalContentWidth?: string;
  minMaxHeight?: string;
  movie: Movie;
}

const ExpandingCard: React.FC<ExpandingCardProps> = React.memo(
  ({
    staticContentWidth = "300px",
    expandedContentWidth = "300px",
    totalContentWidth = "600px",
    minMaxHeight = "500px",
    movie,
  }) => {
    const [isHovered, setIsHovered] = useState(false);
    const [dominantColor, setDominantColor] = useState("#ffffff");
    const navigate = useNavigate();

    const getLuminance = useCallback((hexColor: string) => {
      const hex = hexColor.replace('#', '');
      const r = parseInt(hex.substring(0, 2), 16) / 255;
      const g = parseInt(hex.substring(2, 4), 16) / 255;
      const b = parseInt(hex.substring(4, 6), 16) / 255;
      return 0.2126 * r + 0.7152 * g + 0.0722 * b;
    }, []);
    
    const getContrastColor = useCallback((hexColor: string) => {
      const luminance = getLuminance(hexColor);
      return luminance > 0.5 ? '#000000' : '#ffffff';
    }, [getLuminance]); // Add getLuminance as dependency

    const styles = useMemo(
      () => ({
        container: {
          width: isHovered ? totalContentWidth : staticContentWidth,
          transition: "width 250ms ease-in-out",
          height: minMaxHeight,
          minWidth: "230px",
        },
        image: {
          width: staticContentWidth,
          minWidth: "230px",
        },
        content: {
          width: expandedContentWidth,
          transform: isHovered ? "translateX(0)" : "translateX(100%)",
          transition: "transform 250ms ease-in-out",
        },
        title: {
          color: dominantColor,
        },
        button: {
          backgroundColor: dominantColor,
          color: getContrastColor(dominantColor),
        },
      }),
      [
        isHovered,
        staticContentWidth,
        totalContentWidth,
        expandedContentWidth,
        dominantColor,
        minMaxHeight,
        getContrastColor,
      ]
    );

    const getColors = useCallback((colors: string[]) => {
      setDominantColor(colors[0] || "#ffffff");
    }, []);

    const handleMouseEnter = useCallback(() => setIsHovered(true), []);
    const handleMouseLeave = useCallback(() => setIsHovered(false), []);
    const handleButtonClick = useCallback(() => navigate("/"), [navigate]);

    const formattedDate = useMemo(
      () => format(new Date(movie.releaseDate), "MMM dd, yyyy"),
      [movie.releaseDate]
    );

    const MovieDetails = React.memo(() => (
      <div className="flex flex-col gap-2 w-full h-full overflow-hidden overflow-y-auto">
        <span
          className="text-[calc(0.8vw+0.5rem)] font-bold my-4"
          style={styles.title}
        >
          {movie.name}
        </span>
        <section className="text-secondary-foreground">
          <span>{movie.description}</span>
          <div className="mt-4 flex gap-3 items-center">
            <span className="font-semibold text-lg">Duration:</span>
            <span>{movie.duration_min} minutes</span>
          </div>
          <div className="flex gap-3 items-center">
            <span className="font-semibold text-lg">Region:</span>
            <span>{movie.category}</span>
          </div>
          <div className="flex gap-3 items-center">
            <span className="font-semibold text-lg">Language:</span>
            <span>{movie.language}</span>
          </div>
          <div className="flex gap-3 items-center">
            <span className="font-semibold text-lg">Release Date:</span>
            <span>{formattedDate}</span>
          </div>
        </section>
        <div className="mt-7 w-full flex justify-center">
          <InteractiveHoverButton
            style={styles.button}
            className="w-64"
            icon={<Ticket />}
            onClick={handleButtonClick}
            text="Get Your ticket"
          />
        </div>
      </div>
    ));

    return (
      <div
        className="relative h-fit overflow-hidden rounded-lg cursor-pointer bg-gray-800"
        style={styles.container}
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
      >
        <div className="flex-shrink-0 h-full bg-gray-500" style={styles.image}>
          <ColorExtractor getColors={getColors}>
            <img
              src={movie.posterURL.sm}
              alt={movie.name}
              className="w-full h-full object-cover"
              loading="lazy"
            />
          </ColorExtractor>
        </div>
        <div
          className="absolute right-0 top-0 h-full bg-secondary text-white p-4"
          style={styles.content}
        >
          <MovieDetails />
        </div>
      </div>
    );
  }
);

export default ExpandingCard;
import React, { useState, useRef, useEffect } from "react";
import { useLocation } from "react-router-dom";

type MenuItem = {
  title: string;
  href: string;
  className?: string;
};

type MenuProps = {
  config: MenuItem[];
  maxWidth?: number;
};

const withDefaultIndex = (a: number, def = 0): number => (!~a ? def : a);

const curRouteIndex = (items: MenuItem[], pathname: string): number => {
  return withDefaultIndex(items.findIndex((e) => e.href === pathname));
};

const Menu: React.FC<MenuProps> = ({ config }) => {
  const location = useLocation();
  const [hoverIndex, setHoverIndex] = useState<number>(-1);
  const [selectedIndex, setSelectedIndex] = useState<number>(
    curRouteIndex(config, location.pathname)
  );
  const [underlineStyles, setUnderlineStyles] = useState({
    width: 0,
    left: 0,
  });
  const menuItemsRef = useRef<(HTMLLIElement | null)[]>([]);

  // Update underline position and width based on the current active/hovered item
  const updateUnderline = (index: number) => {
    const currentItem = menuItemsRef.current[index];
    if (currentItem) {
      const parentLeft = currentItem.parentElement?.getBoundingClientRect().left || 0;
      const itemRect = currentItem.getBoundingClientRect();
      const linkElement = currentItem.querySelector('a');
      
      setUnderlineStyles({
        width: linkElement?.offsetWidth || itemRect.width,
        left: itemRect.left - parentLeft,
      });
    }
  };

  // Update underline on hover/selection change
  useEffect(() => {
    const activeIndex = hoverIndex !== -1 ? hoverIndex : selectedIndex;
    updateUnderline(activeIndex);
  }, [hoverIndex, selectedIndex]);

  // Update underline on window resize
  useEffect(() => {
    const handleResize = () => {
      const activeIndex = hoverIndex !== -1 ? hoverIndex : selectedIndex;
      updateUnderline(activeIndex);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [hoverIndex, selectedIndex]);

  return (
    <ul className="relative flex justify-between bg-primary gap-8 p-4 rounded-md w-fit">
      {config.map((item, idx) => (
        <li
          key={idx}
          ref={(el) => (menuItemsRef.current[idx] = el)}
          onMouseEnter={() => setHoverIndex(idx)}
          onMouseLeave={() => setHoverIndex(-1)}
          className="hover relative"
        >
          <a
            href={item.href}
            onClick={() => setSelectedIndex(idx)}
            className={`text-center whitespace-nowrap ${
              item.className || "text-white"
            }`}
          >
            {item.title}
          </a>
        </li>
      ))}
      <hr
        className="absolute bottom-3 h-[0.178rem] bg-white transition-all duration-300"
        style={{
          width: `${underlineStyles.width}px`,
          left: `${underlineStyles.left}px`,
        }}
      />
    </ul>
  );
};

export default Menu;import { useState, useEffect, useCallback } from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { Link } from "react-router-dom";

const images = [
  "https://picsum.photos/id/337/1920/1080",
  "https://picsum.photos/id/338/1920/1080",
  "https://picsum.photos/id/339/1920/1080",
  "https://picsum.photos/id/340/1920/1080",
  "https://picsum.photos/id/341/1920/1080",
];

const AUTO_SCROLL_INTERVAL = 5000; // 5 seconds
const USER_INACTIVITY_TIMEOUT = 5000; // 10 seconds

export default function HeroCarousel() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isAutoScrolling, setIsAutoScrolling] = useState(true);
  const [lastInteractionTime, setLastInteractionTime] = useState(Date.now());

  const nextSlide = useCallback(() => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
  }, []);

  const prevSlide = useCallback(() => {
    setCurrentIndex(
      (prevIndex) => (prevIndex - 1 + images.length) % images.length
    );
  }, []);

  const handleUserInteraction = useCallback(() => {
    setIsAutoScrolling(false);
    setLastInteractionTime(Date.now());
  }, []);

  useEffect(() => {
    let autoScrollTimer: NodeJS.Timeout;
    let userInactivityTimer: NodeJS.Timeout;

    if (isAutoScrolling) {
      autoScrollTimer = setInterval(nextSlide, AUTO_SCROLL_INTERVAL);
    } else {
      userInactivityTimer = setTimeout(() => {
        if (Date.now() - lastInteractionTime >= USER_INACTIVITY_TIMEOUT) {
          setIsAutoScrolling(true);
        }
      }, USER_INACTIVITY_TIMEOUT);
    }

    return () => {
      clearInterval(autoScrollTimer);
      clearTimeout(userInactivityTimer);
    };
  }, [isAutoScrolling, lastInteractionTime, nextSlide]);

  return (
    <div className="relative w-full max-md:h-[80vw] h-[80vh] overflow-hidden">
      <div className="w-full h-full overflow-hidden">
        {images.map((src, index) => (
          <div
            key={src}
            className={`absolute top-0 w-full h-full transition-transform duration-1000 ease-in-out ${
              index === currentIndex
                ? "left-0"
                : index < currentIndex
                ? "-translate-x-full"
                : "translate-x-full"
            }`}
          >
            {" "}
            <Link to={"/"}>
              <img
                src={src}
                alt={`Slide ${index + 1}`}
                className="w-full h-full object-cover"
              />
            </Link>
          </div>
        ))}
      </div>
      <button
        className="absolute top-1/2 left-4 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-md hover:bg-primary transition-all duration-300"
        onClick={() => {
          handleUserInteraction();
          prevSlide();
        }}
        aria-label="Previous slide"
      >
        <ChevronLeft className="w-6 h-6" />
      </button>
      <button
        className="absolute top-1/2 right-4 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-md hover:bg-primary transition-all duration-300"
        onClick={() => {
          handleUserInteraction();
          nextSlide();
        }}
        aria-label="Next slide"
      >
        <ChevronRight className="w-6 h-6" />
      </button>
    </div>
  );
}
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
import { useId } from "react";

import { cn } from "@/lib/utils";

interface GridPatternProps {
  width?: number;
  height?: number;
  x?: number;
  y?: number;
  squares?: Array<[x: number, y: number]>;
  strokeDasharray?: string;
  className?: string;
  [key: string]: unknown;
}

export function GridPattern({
  width = 40,
  height = 40,
  x = -1,
  y = -1,
  strokeDasharray = "0",
  squares,
  className,
  ...props
}: GridPatternProps) {
  const id = useId();

  return (
    <svg
      aria-hidden="true"
      className={cn(
        "pointer-events-none absolute inset-0 h-full w-full fill-gray-400/30 stroke-gray-400/30",
        className,
      )}
      {...props}
    >
      <defs>
        <pattern
          id={id}
          width={width}
          height={height}
          patternUnits="userSpaceOnUse"
          x={x}
          y={y}
        >
          <path
            d={`M.5 ${height}V.5H${width}`}
            fill="none"
            strokeDasharray={strokeDasharray}
          />
        </pattern>
      </defs>
      <rect width="100%" height="100%" strokeWidth={0} fill={`url(#${id})`} />
      {squares && (
        <svg x={x} y={y} className="overflow-visible">
          {squares.map(([x, y]) => (
            <rect
              strokeWidth="0"
              key={`${x}-${y}`}
              width={width - 1}
              height={height - 1}
              x={x * width + 1}
              y={y * height + 1}
            />
          ))}
        </svg>
      )}
    </svg>
  );
}

export default GridPattern;
"use client";

import React, { useState } from "react";
import { AnimatePresence, motion } from "framer-motion";

interface AnimatedSubscribeButtonProps {
  buttonColor: string;
  buttonTextColor?: string;
  subscribeStatus: boolean;
  initialText: React.ReactElement | string;
  changeText: React.ReactElement | string;
}

export const AnimatedSubscribeButton: React.FC<
  AnimatedSubscribeButtonProps
> = ({
  buttonColor,
  subscribeStatus,
  buttonTextColor,
  changeText,
  initialText,
}) => {
  const [isSubscribed, setIsSubscribed] = useState<boolean>(subscribeStatus);

  return (
    <AnimatePresence mode="wait">
      {isSubscribed ? (
        <motion.button
          className="relative flex h-10 w-[200px] items-center justify-center overflow-hidden rounded-md bg-white outline outline-1 outline-black"
          onClick={() => setIsSubscribed(false)}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          <motion.span
            key="action"
            className="relative flex h-full w-full items-center justify-center font-semibold"
            initial={{ y: -50 }}
            animate={{ y: 0 }}
            style={{ color: buttonColor }}
          >
            {changeText}
          </motion.span>
        </motion.button>
      ) : (
        <motion.button
          className="relative flex h-10 w-[200px] cursor-pointer items-center justify-center rounded-md border-none"
          style={{ backgroundColor: buttonColor, color: buttonTextColor }}
          onClick={() => setIsSubscribed(true)}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          <motion.span
            key="reaction"
            className="relative flex items-center justify-center font-semibold"
            initial={{ x: 0 }}
            exit={{ x: 50, transition: { duration: 0.1 } }}
          >
            {initialText}
          </motion.span>
        </motion.button>
      )}
    </AnimatePresence>
  );
};
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
import { useState } from "react";
import {
  motion,
  useTransform,
  AnimatePresence,
  useMotionValue,
  useSpring,
} from "framer-motion";

export const AnimatedTooltip = ({
  items,
}: {
  items: {
    id: number;
    name: string;
    designation: string;
    image: string;
  }[];
}) => {
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);
  const springConfig = { stiffness: 100, damping: 5 };
  const x = useMotionValue(0); // going to set this value on mouse move
  // rotate the tooltip
  const rotate = useSpring(
    useTransform(x, [-100, 100], [-45, 45]),
    springConfig
  );
  // translate the tooltip
  const translateX = useSpring(
    useTransform(x, [-100, 100], [-50, 50]),
    springConfig
  );
  const handleMouseMove = (event: any) => {
    const halfWidth = event.target.offsetWidth / 2;
    x.set(event.nativeEvent.offsetX - halfWidth); // set the x value, which is then used in transform and rotate
  };

  return (
    <>
      {items.map((item, idx) => (
        <div
          className="-mr-4  relative group"
          key={item.name}
          onMouseEnter={() => setHoveredIndex(item.id)}
          onMouseLeave={() => setHoveredIndex(null)}
        >
          <AnimatePresence mode="popLayout">
            {hoveredIndex === item.id && (
              <motion.div
                initial={{ opacity: 0, y: 20, scale: 0.6 }}
                animate={{
                  opacity: 1,
                  y: 0,
                  scale: 1,
                  transition: {
                    type: "spring",
                    stiffness: 260,
                    damping: 10,
                  },
                }}
                exit={{ opacity: 0, y: 20, scale: 0.6 }}
                style={{
                  translateX: translateX,
                  rotate: rotate,
                  whiteSpace: "nowrap",
                }}
                className="absolute -top-16 -left-1/2 translate-x-1/2 flex text-xs  flex-col items-center justify-center rounded-md bg-black z-50 shadow-xl px-4 py-2"
              >
                <div className="absolute inset-x-10 z-30 w-[20%] -bottom-px bg-gradient-to-r from-transparent via-secondary to-transparent h-px " />
                <div className="absolute left-10 w-[40%] z-30 -bottom-px bg-gradient-to-r from-transparent via-primary to-transparent h-px " />
                <div className="font-bold text-white relative z-30 text-base">
                  {item.name}
                </div>
                <div className="text-white text-xs">{item.designation}</div>
              </motion.div>
            )}
          </AnimatePresence>
          <img
            onMouseMove={handleMouseMove}
            height={100}
            width={100}
            src={item.image}
            alt={item.name}
            className="object-cover !m-0 !p-0 object-top rounded-full size-[calc(5vw+3rem)] group-hover:scale-[115%] group-hover:z-30 relative transition duration-500"
          />
        </div>
      ))}
    </>
  );
};
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/shadcn/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
// src/components/shadcn/sonner.tsx
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
"use client"

import {
  BadgeCheck,
  Bell,
  ChevronsUpDown,
  CreditCard,
  LogOut,
  Sparkles,
} from "lucide-react"

import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from "@/components/shadcn/avatar"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/shadcn/dropdown-menu"
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/shadcn/sidebar"

export function NavUser({
  user,
}: {
  user: {
    name: string
    email: string
    avatar: string
  }
}) {
  const { isMobile } = useSidebar()

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <Avatar className="h-8 w-8 rounded-lg">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback className="rounded-lg">CN</AvatarFallback>
              </Avatar>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-semibold">{user.name}</span>
                <span className="truncate text-xs">{user.email}</span>
              </div>
              <ChevronsUpDown className="ml-auto size-4" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
            side={isMobile ? "bottom" : "right"}
            align="end"
            sideOffset={4}
          >
            <DropdownMenuLabel className="p-0 font-normal">
              <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                <Avatar className="h-8 w-8 rounded-lg">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback className="rounded-lg">CN</AvatarFallback>
                </Avatar>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-semibold">{user.name}</span>
                  <span className="truncate text-xs">{user.email}</span>
                </div>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <Sparkles />
                Upgrade to Pro
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <BadgeCheck />
                Account
              </DropdownMenuItem>
              <DropdownMenuItem>
                <CreditCard />
                Billing
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Bell />
                Notifications
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuItem>
              <LogOut />
              Log out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  )
}
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
import * as React from "react"
import {
  AudioWaveform,
  BookOpen,
  Bot,
  Command,
  Frame,
  GalleryVerticalEnd,
  Map,
  PieChart,
  Settings2,
  SquareTerminal,
} from "lucide-react"

import { NavMain } from "@/components/shadcn/nav-main"
import { NavProjects } from "@/components/shadcn/nav-projects"
import { NavUser } from "@/components/shadcn/nav-user"
import { TeamSwitcher } from "@/components/shadcn/team-switcher"
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarRail,
} from "@/components/shadcn/sidebar"

// This is sample data.
const data = {
  user: {
    name: "shadcn",
    email: "m@example.com",
    avatar: "/avatars/shadcn.jpg",
  },
  teams: [
    {
      name: "Acme Inc",
      logo: GalleryVerticalEnd,
      plan: "Enterprise",
    },
    {
      name: "Acme Corp.",
      logo: AudioWaveform,
      plan: "Startup",
    },
    {
      name: "Evil Corp.",
      logo: Command,
      plan: "Free",
    },
  ],
  navMain: [
    {
      title: "Playground",
      url: "#",
      icon: SquareTerminal,
      isActive: true,
      items: [
        {
          title: "History",
          url: "#",
        },
        {
          title: "Starred",
          url: "#",
        },
        {
          title: "Settings",
          url: "#",
        },
      ],
    },
    {
      title: "Models",
      url: "#",
      icon: Bot,
      items: [
        {
          title: "Genesis",
          url: "#",
        },
        {
          title: "Explorer",
          url: "#",
        },
        {
          title: "Quantum",
          url: "#",
        },
      ],
    },
    {
      title: "Documentation",
      url: "#",
      icon: BookOpen,
      items: [
        {
          title: "Introduction",
          url: "#",
        },
        {
          title: "Get Started",
          url: "#",
        },
        {
          title: "Tutorials",
          url: "#",
        },
        {
          title: "Changelog",
          url: "#",
        },
      ],
    },
    {
      title: "Settings",
      url: "#",
      icon: Settings2,
      items: [
        {
          title: "General",
          url: "#",
        },
        {
          title: "Team",
          url: "#",
        },
        {
          title: "Billing",
          url: "#",
        },
        {
          title: "Limits",
          url: "#",
        },
      ],
    },
  ],
  projects: [
    {
      name: "Design Engineering",
      url: "#",
      icon: Frame,
    },
    {
      name: "Sales & Marketing",
      url: "#",
      icon: PieChart,
    },
    {
      name: "Travel",
      url: "#",
      icon: Map,
    },
  ],
}

export function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {
  return (
    <Sidebar collapsible="icon" {...props}>
      <SidebarHeader>
        <TeamSwitcher teams={data.teams} />
      </SidebarHeader>
      <SidebarContent>
        <NavMain items={data.navMain} />
        <NavProjects projects={data.projects} />
      </SidebarContent>
      <SidebarFooter>
        <NavUser user={data.user} />
      </SidebarFooter>
      <SidebarRail />
    </Sidebar>
  )
}
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
import {
  Folder,
  Forward,
  MoreHorizontal,
  Trash2,
  type LucideIcon,
} from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/shadcn/dropdown-menu"
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/shadcn/sidebar"

export function NavProjects({
  projects,
}: {
  projects: {
    name: string
    url: string
    icon: LucideIcon
  }[]
}) {
  const { isMobile } = useSidebar()

  return (
    <SidebarGroup className="group-data-[collapsible=icon]:hidden">
      <SidebarGroupLabel>Projects</SidebarGroupLabel>
      <SidebarMenu>
        {projects.map((item) => (
          <SidebarMenuItem key={item.name}>
            <SidebarMenuButton asChild>
              <a href={item.url}>
                <item.icon />
                <span>{item.name}</span>
              </a>
            </SidebarMenuButton>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <SidebarMenuAction showOnHover>
                  <MoreHorizontal />
                  <span className="sr-only">More</span>
                </SidebarMenuAction>
              </DropdownMenuTrigger>
              <DropdownMenuContent
                className="w-48 rounded-lg"
                side={isMobile ? "bottom" : "right"}
                align={isMobile ? "end" : "start"}
              >
                <DropdownMenuItem>
                  <Folder className="text-muted-foreground" />
                  <span>View Project</span>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Forward className="text-muted-foreground" />
                  <span>Share Project</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Trash2 className="text-muted-foreground" />
                  <span>Delete Project</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </SidebarMenuItem>
        ))}
        <SidebarMenuItem>
          <SidebarMenuButton className="text-sidebar-foreground/70">
            <MoreHorizontal className="text-sidebar-foreground/70" />
            <span>More</span>
          </SidebarMenuButton>
        </SidebarMenuItem>
      </SidebarMenu>
    </SidebarGroup>
  )
}
"use client";
 
import { zodResolver } from "@hookform/resolvers/zod";
import { CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { useForm } from "react-hook-form";
import { z } from "zod";
 
import { cn } from "@/lib/utils";
import { Button } from "@/components/shadcn/button";
import { Calendar } from "@/components/shadcn/calendar";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/shadcn/form";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/shadcn/popover";
import { ScrollArea, ScrollBar } from "@/components/shadcn/scroll-area";
import { toast } from "sonner";
 
const FormSchema = z.object({
  time: z.date({
    required_error: "A date and time is required.",
  }),
});
 
export function DateTimePickerForm() {
  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
  });
 
  function onSubmit(data: z.infer<typeof FormSchema>) {
    toast.success(`Selected date and time: ${format(data.time, "PPPPpppp")}`);
  }
 
  function handleDateSelect(date: Date | undefined) {
    if (date) {
      form.setValue("time", date);
    }
  }
 
  function handleTimeChange(type: "hour" | "minute" | "ampm", value: string) {
    const currentDate = form.getValues("time") || new Date();
    const newDate = new Date(currentDate);
 
    if (type === "hour") {
      const hour = parseInt(value, 10);
      newDate.setHours(newDate.getHours() >= 12 ? hour + 12 : hour);
    } else if (type === "minute") {
      newDate.setMinutes(parseInt(value, 10));
    } else if (type === "ampm") {
      const hours = newDate.getHours();
      if (value === "AM" && hours >= 12) {
        newDate.setHours(hours - 12);
      } else if (value === "PM" && hours < 12) {
        newDate.setHours(hours + 12);
      }
    }
 
    form.setValue("time", newDate);
  }
 
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-5">
        <FormField
          control={form.control}
          name="time"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Enter your date & time (12h)</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "w-full pl-3 text-left font-normal",
                        !field.value && "text-muted-foreground"
                      )}
                    >
                      {field.value ? (
                        format(field.value, "MM/dd/yyyy hh:mm aa")
                      ) : (
                        <span>MM/DD/YYYY hh:mm aa</span>
                      )}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <div className="sm:flex">
                    <Calendar
                      mode="single"
                      selected={field.value}
                      onSelect={handleDateSelect}
                      initialFocus
                    />
                    <div className="flex flex-col sm:flex-row sm:h-[300px] divide-y sm:divide-y-0 sm:divide-x">
                      <ScrollArea className="w-64 sm:w-auto">
                        <div className="flex sm:flex-col p-2">
                          {Array.from({ length: 12 }, (_, i) => i + 1)
                            .reverse()
                            .map((hour) => (
                              <Button
                                key={hour}
                                size="icon"
                                variant={
                                  field.value &&
                                  field.value.getHours() % 12 === hour % 12
                                    ? "default"
                                    : "ghost"
                                }
                                className="sm:w-full shrink-0 aspect-square"
                                onClick={() =>
                                  handleTimeChange("hour", hour.toString())
                                }
                              >
                                {hour}
                              </Button>
                            ))}
                        </div>
                        <ScrollBar
                          orientation="horizontal"
                          className="sm:hidden"
                        />
                      </ScrollArea>
                      <ScrollArea className="w-64 sm:w-auto">
                        <div className="flex sm:flex-col p-2">
                          {Array.from({ length: 12 }, (_, i) => i * 5).map(
                            (minute) => (
                              <Button
                                key={minute}
                                size="icon"
                                variant={
                                  field.value &&
                                  field.value.getMinutes() === minute
                                    ? "default"
                                    : "ghost"
                                }
                                className="sm:w-full shrink-0 aspect-square"
                                onClick={() =>
                                  handleTimeChange("minute", minute.toString())
                                }
                              >
                                {minute.toString().padStart(2, "0")}
                              </Button>
                            )
                          )}
                        </div>
                        <ScrollBar
                          orientation="horizontal"
                          className="sm:hidden"
                        />
                      </ScrollArea>
                      <ScrollArea className="">
                        <div className="flex sm:flex-col p-2">
                          {["AM", "PM"].map((ampm) => (
                            <Button
                              key={ampm}
                              size="icon"
                              variant={
                                field.value &&
                                ((ampm === "AM" &&
                                  field.value.getHours() < 12) ||
                                  (ampm === "PM" &&
                                    field.value.getHours() >= 12))
                                  ? "default"
                                  : "ghost"
                              }
                              className="sm:w-full shrink-0 aspect-square"
                              onClick={() => handleTimeChange("ampm", ampm)}
                            >
                              {ampm}
                            </Button>
                          ))}
                        </div>
                      </ScrollArea>
                    </div>
                  </div>
                </PopoverContent>
              </Popover>
              <FormDescription>
                Please select your preferred date and time.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
}import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
import { Moon, Sun } from "lucide-react"
 
import { Button } from "@/components/shadcn/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/shadcn/dropdown-menu"
import { useTheme } from "@/components/common/theme-provider"
 
export function ModeToggle() {
  const { setTheme } = useTheme()
 
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}import { useId } from "react";

import { cn } from "@/lib/utils";

interface DotPatternProps {
  width?: number;
  height?: number;
  x?: number;
  y?: number;
  cx?: number;
  cy?: number;
  cr?: number;
  className?: string;
  [key: string]: unknown;
}
export function DotPattern({
  width = 16,
  height = 16,
  x = 0,
  y = 0,
  cx = 1,
  cy = 1,
  cr = 1,
  className,
  ...props
}: DotPatternProps) {
  const id = useId();

  return (
    <svg
      aria-hidden="true"
      className={cn(
        "pointer-events-none absolute inset-0 h-full w-full fill-neutral-400/80",
        className,
      )}
      {...props}
    >
      <defs>
        <pattern
          id={id}
          width={width}
          height={height}
          patternUnits="userSpaceOnUse"
          patternContentUnits="userSpaceOnUse"
          x={x}
          y={y}
        >
          <circle id="pattern-circle" cx={cx} cy={cy} r={cr} />
        </pattern>
      </defs>
      <rect width="100%" height="100%" strokeWidth={0} fill={`url(#${id})`} />
    </svg>
  );
}

export default DotPattern;
"use client"

import { ChevronRight, type LucideIcon } from "lucide-react"

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/shadcn/collapsible"
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
} from "@/components/shadcn/sidebar"

export function NavMain({
  items,
}: {
  items: {
    title: string
    url: string
    icon?: LucideIcon
    isActive?: boolean
    items?: {
      title: string
      url: string
    }[]
  }[]
}) {
  return (
    <SidebarGroup>
      <SidebarGroupLabel>Platform</SidebarGroupLabel>
      <SidebarMenu>
        {items.map((item) => (
          <Collapsible
            key={item.title}
            asChild
            defaultOpen={item.isActive}
            className="group/collapsible"
          >
            <SidebarMenuItem>
              <CollapsibleTrigger asChild>
                <SidebarMenuButton tooltip={item.title}>
                  {item.icon && <item.icon />}
                  <span>{item.title}</span>
                  <ChevronRight className="ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90" />
                </SidebarMenuButton>
              </CollapsibleTrigger>
              <CollapsibleContent>
                <SidebarMenuSub>
                  {item.items?.map((subItem) => (
                    <SidebarMenuSubItem key={subItem.title}>
                      <SidebarMenuSubButton asChild>
                        <a href={subItem.url}>
                          <span>{subItem.title}</span>
                        </a>
                      </SidebarMenuSubButton>
                    </SidebarMenuSubItem>
                  ))}
                </SidebarMenuSub>
              </CollapsibleContent>
            </SidebarMenuItem>
          </Collapsible>
        ))}
      </SidebarMenu>
    </SidebarGroup>
  )
}
// src/components/shadcn/interactive-hover-button.tsx
import React from "react";
import { cn } from "@/lib/utils";

interface InteractiveHoverButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  text?: string;
  icon?: React.ReactNode; // New prop for passing custom icon
}

const InteractiveHoverButton = React.forwardRef<
  HTMLButtonElement,
  InteractiveHoverButtonProps
>(({ text = "Button", icon, className, ...props }, ref) => {
  return (
    <button
      ref={ref}
      className={cn(
        "group relative cursor-pointer overflow-hidden rounded-full border bg-background p-2 text-center font-semibold",
        className
      )}
      {...props}
    >
      <span className="inline-block translate-x-1 transition-all duration-300 group-hover:translate-x-12 group-hover:opacity-0">
        {text}
      </span>
      <div className="absolute top-0 z-10 flex h-full w-full translate-x-12 items-center justify-center gap-2 text-primary-foreground opacity-0 transition-all duration-300 group-hover:-translate-x-1 group-hover:opacity-100">
        <span>{text}</span>
        {icon || null} {/* Render the custom icon */}
      </div>
      <div className="absolute left-[20%] top-[40%] h-2 w-2 scale-[1] rounded-lg bg-primary transition-all duration-300 group-hover:left-[0%] group-hover:top-[0%] group-hover:h-full group-hover:w-full group-hover:scale-[1.8] group-hover:bg-primary"></div>
    </button>
  );
});

InteractiveHoverButton.displayName = "InteractiveHoverButton";

export default InteractiveHoverButton;
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/shadcn/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/shadcn/button"
import { Input } from "@/components/shadcn/input"
import { Separator } from "@/components/shadcn/separator"
import { Sheet, SheetContent } from "@/components/shadcn/sheet"
import { Skeleton } from "@/components/shadcn/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/shadcn/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
// src/components/shadcn/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/shadcn/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
import React, { CSSProperties } from "react";

import { cn } from "@/lib/utils";

interface RippleProps {
  mainCircleSize?: number;
  mainCircleOpacity?: number;
  numCircles?: number;
  className?: string;
}

const Ripple = React.memo(function Ripple({
  mainCircleSize = 250,
  mainCircleOpacity = 0.3,
  numCircles =10,
  className,
}: RippleProps) {
  return (
    <div
      className={cn(
        "pointer-events-none select-none absolute inset-0 [mask-image:linear-gradient(to_bottom,white,transparent)]",
        className,
      )}
    >
      {Array.from({ length: numCircles }, (_, i) => {
        const size = mainCircleSize + i * 70;
        const opacity = mainCircleOpacity - i * 0.03;
        const animationDelay = `${i * 0.06}s`;
        const borderStyle = i === numCircles - 1 ? "dashed" : "solid";
        const borderOpacity = 5 + i * 5;

        return (
          <div
            key={i}
            className={`absolute animate-ripple rounded-full bg-foreground/25 shadow-xl border [--i:${i}]`}
            style={
              {
                width: `${size}px`,
                height: `${size}px`,
                opacity,
                animationDelay,
                borderStyle,
                borderWidth: "1px",
                borderColor: `hsl(var(--foreground), ${borderOpacity / 100})`,
                top: "50%",
                left: "50%",
                transform: "translate(-50%, -50%) scale(1)",
              } as CSSProperties
            }
          />
        );
      })}
    </div>
  );
});

Ripple.displayName = "Ripple";

export default Ripple;
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
import * as React from "react"
import { ChevronsUpDown, Plus } from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuTrigger,
} from "@/components/shadcn/dropdown-menu"
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/shadcn/sidebar"

export function TeamSwitcher({
  teams,
}: {
  teams: {
    name: string
    logo: React.ElementType
    plan: string
  }[]
}) {
  const { isMobile } = useSidebar()
  const [activeTeam, setActiveTeam] = React.useState(teams[0])

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <div className="flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground">
                <activeTeam.logo className="size-4" />
              </div>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-semibold">
                  {activeTeam.name}
                </span>
                <span className="truncate text-xs">{activeTeam.plan}</span>
              </div>
              <ChevronsUpDown className="ml-auto" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
            align="start"
            side={isMobile ? "bottom" : "right"}
            sideOffset={4}
          >
            <DropdownMenuLabel className="text-xs text-muted-foreground">
              Teams
            </DropdownMenuLabel>
            {teams.map((team, index) => (
              <DropdownMenuItem
                key={team.name}
                onClick={() => setActiveTeam(team)}
                className="gap-2 p-2"
              >
                <div className="flex size-6 items-center justify-center rounded-sm border">
                  <team.logo className="size-4 shrink-0" />
                </div>
                {team.name}
                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>
              </DropdownMenuItem>
            ))}
            <DropdownMenuSeparator />
            <DropdownMenuItem className="gap-2 p-2">
              <div className="flex size-6 items-center justify-center rounded-md border bg-background">
                <Plus className="size-4" />
              </div>
              <div className="font-medium text-muted-foreground">Add team</div>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  )
}
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
// src/main.tsx
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import App from "./App.tsx";

import { BrowserRouter } from "react-router-dom";
import { QueryClientProvider } from "@tanstack/react-query";
import queryClient from "./queries/queryClient.ts";
import { AuthProvider } from "./provider/authContext.tsx";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <AuthProvider>
      <BrowserRouter>
        <QueryClientProvider client={queryClient}>
          <App />
        </QueryClientProvider>
      </BrowserRouter>
    </AuthProvider>
  </StrictMode>
);
// src/api/authApi.ts
import { ImageUploadRequest } from "@/interfaces/auth/IImage";
import {
  loginUser,
  registerUser,
  resetPassword,
  sendResetEmail,
  uploadProfileImage,
} from "@/service/authService";

import { useMutation } from "@tanstack/react-query";
import { toast } from "sonner";

export const useLogin = () => {
  return useMutation({
    mutationFn: loginUser,
    onSuccess: () => {
      toast.success("Login successful", {
        className: "text-white border-success", // Tailwind classes for success toast
      });

      setTimeout(() => {
        window.location.href = "/";
      }, 2000);
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || "Login failed", {
        className: "bg-error text-white border-error", // Tailwind classes for error toast
      });
    },
  });
};
export const useRegister = () => {
  return useMutation({
    mutationFn: registerUser,
    onSuccess: () => {
      toast.success("Registration successful");
      setTimeout(() => {
        window.location.href = "/";
      }, 2000);
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || "Registration failed");
    },
  });
};
export const useForgetPassword = () => {
  return useMutation({
    mutationFn: sendResetEmail,
    onSuccess: () => {
      toast.success("Please check your inbox for reset link.");
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || "Failed to send reset link");
    },
  });
};

export const usePasswordReset = () => {
  return useMutation({
    mutationFn: resetPassword,
    onSuccess: () => {
      toast.success("Password successfully reset", {
        className: "text-white border-success",
      });

      setTimeout(() => {
        window.location.href = "/login";
      }, 2000);
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || "Password Reset failed", {
        className: "bg-error text-white border-error",
      });
    },
  });
};

export const useProfileImageUpload = () => {
  return useMutation({
    mutationFn: (request: ImageUploadRequest) => uploadProfileImage(request),
    onSuccess: () => {
      toast.success("Profile Picture uploaded successfully", {
        className: "text-white border-success",
      });

      setTimeout(() => {
        window.location.href = "/";
      }, 2000);
    },
    onError: (error: any) => {
      console.error("Upload error:", error);
      toast.error(error.response?.data?.message || "Upload failed");
    },
  });
};
import { addMovie, fetchMovieBySlug, fetchAllMoviesbyStatus, fetchAllMovies } from "@/service/movieService";
import { toast } from "sonner";
import { useMutation, useQuery } from "@tanstack/react-query";
import { Movie } from "@/interfaces/IMovie";

export const useFetchAllMoviesByStatus = (variant: string) => {
  return useQuery<Movie[], Error>({
    queryKey: ["movies", variant], // Unique key for the query
    queryFn: () => fetchAllMoviesbyStatus(variant), // Use the service function
  });
};
export const useFetchAllMovies = () => {
  return useQuery<Movie[], Error>({
    queryKey: ["movies"], // Unique key for the query
    queryFn: () => fetchAllMovies(), // Use the service function
  });
};
export const useFetchMovieBySlug = (slug: string) => {
  return useQuery<Movie, Error>({
    queryKey: ["movies", slug], // Unique key for the query
    queryFn: () => fetchMovieBySlug(slug), // Use the service function
  });
};

export const useAddMovie = () => {
  return useMutation({
    mutationFn: addMovie,
    onSuccess: () => {
      toast.success("Movie Added Successfully", {
        className: "text-white border-success", // Tailwind classes for success toast
      });

      setTimeout(() => {
        window.location.href = "/";
      }, 2000);
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || "Adding Movie failed", {
        className: "bg-error text-white border-error", // Tailwind classes for error toast
      });
    },
  });
};
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";
import { hallService } from "@/service/hallService";
import {
  CreateHallRequest,
  CreateHallResponse,
  Hall,
} from "@/interfaces/IHalls";

export const useCreateHall = () => {
  const queryClient = useQueryClient();

  return useMutation<CreateHallResponse, Error, CreateHallRequest>({
    mutationFn: (data) => hallService.createHall(data),
    onSuccess: () => {
      toast.success("Hall created successfully");
      queryClient.invalidateQueries({ queryKey: ["halls"] });
    },
    onError: (error) => {
      toast.error(error.message || "Failed to create hall");
    },
  });
};
export const useGetHallLayout = (hallId: string) => {
  return useQuery<Hall>({
    queryKey: ["hallLayout", hallId],
    queryFn: () => hallService.getHallLayout(hallId),
    enabled: !!hallId,
  });
};
export const useGetAllHalls = () => {
  return useQuery<Hall[]>({
    queryKey: ["halls"],
    queryFn: () => hallService.getAllHalls(),
  });
};
export const useDeleteHall = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (id: string) => hallService.deleteHall(id),
    onSuccess: () => {
      toast.success("Hall deleted successfully", {
        className: "text-white border-success",
      });
      queryClient.invalidateQueries({ queryKey: ["halls"] });
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || "Failed to delete hall", {
        className: "bg-error text-white border-error",
      });
    },
  });
};

export const useUpdateHall = () => {
  const queryClient = useQueryClient();

  return useMutation<Hall, Error, Hall>({
    mutationFn: (data) => hallService.updateHall(data),
    onSuccess: () => {
      toast.success("Hall updated successfully");
      queryClient.invalidateQueries({ queryKey: ["halls"] });
    },
    onError: (error) => {
      toast.error(error.message || "Failed to update hall");
    },
  });
};

export const useToggleHallStatus = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (id: string) => hallService.toggleHallStatus(id),
    onSuccess: (data) => {
      toast.success(
        `Hall ${data.isActive ? "activated" : "deactivated"} successfully`
      );
      queryClient.invalidateQueries({ queryKey: ["halls"] });
    },
    onError: (error: any) => {
      toast.error(
        error.response?.data?.message || "Failed to toggle hall status"
      );
    },
  });
};
import { toast } from "sonner";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { addTheatre, deleteTheatre, fetchAllTheatres } from "@/service/theatreService";
import { Theatre } from "@/interfaces/ITheatre";
import { FinalTheatreData } from "@/components/common/theatre/theatreForm/TheatreForm";

export const useAddTheatre = () => {
  return useMutation({
    mutationFn: (theatreDetails: FinalTheatreData) =>
      addTheatre(theatreDetails),
    onSuccess: () => {
      toast.success("Theatre Added Successfully", {
        className: "text-white border-success",
      });
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || "Adding Theatre failed", {
        className: "bg-error text-white border-error",
      });
    },
  });
};

export const useFetchAllTheatres = () => {
  return useQuery<Theatre[], Error>({
    queryKey: ["theatres"], 
    queryFn: () => fetchAllTheatres(),
  });
};

export const useDeleteTheatre = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (id: string) => deleteTheatre(id),
    onSuccess: () => {
      toast.success("Distributor deleted successfully", {
        className: "text-white border-success",
      });
      // Invalidate and refetch the distributors list
      queryClient.invalidateQueries({ queryKey: ["movies"] });
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || "Failed to delete distributor", {
        className: "bg-error text-white border-error",
      });
    },
  });
};
import { addDistributor, deleteDistributor, fetchAllDistributors, uploadDistributorLogo } from "@/service/distributorService";
import { toast } from "sonner";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { DistributorLogoRequest, DistributorResponse } from "@/interfaces/Idistributor";

export const useAddDistributor = () => {
  return useMutation({
    mutationFn: addDistributor,
    onSuccess: () => {
      toast.success("Distributor Added Successfully", {
        className: "text-white border-success",
      });
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || "Adding Distributor failed", {
        className: "bg-error text-white border-error",
      });
    },
  });
};

export const useFetchAllDistributors = () => {
  return useQuery<DistributorResponse[], Error>({
    queryKey: ["movies"],
    queryFn: () => fetchAllDistributors(), 
  });
};

export const useDeleteDistributor = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (id: string) => deleteDistributor(id),
    onSuccess: () => {
      toast.success("Distributor deleted successfully", {
        className: "text-white border-success",
      });
      // Invalidate and refetch the distributors list
      queryClient.invalidateQueries({ queryKey: ["movies"] });
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || "Failed to delete distributor", {
        className: "bg-error text-white border-error",
      });
    },
  });
};

export const useDistributorLogoUpload = () => {
  return useMutation({
    mutationFn: (request: DistributorLogoRequest) => uploadDistributorLogo(request),
    onSuccess: () => {
      toast.success("Distributor Logo uploaded successfully", {
        className: "text-white border-success",
      });
      setTimeout(() => {
        window.location.href = "/";
      }, 2000);
    },
    onError: (error: any) => {
      console.error("Upload error:", error);
      toast.error(error.response?.data?.message || "Upload failed");
    },
  });
};// src/pages/HomePage.tsx
import HeroCarousel from "@/components/custom/HeroCarousel";
import NowShowingSection from "@/components/pageComponents/dashboard/NowShowingSection";

const HomePage = () => {
  return (
    <>
      <HeroCarousel />
      <NowShowingSection variant="showing"/>
      <NowShowingSection variant="upcoming"/>
    </>
  );
};

export default HomePage;
// src/pages/auth/RegistrationPage.tsx
import * as React from "react";

import { Card, CardContent, CardHeader } from "@/components/shadcn/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from "@/components/shadcn/form";
import { Input } from "@/components/shadcn/input";
import { Button } from "@/components/shadcn/button";
import { Label } from "@/components/shadcn/label";

import { Eye, EyeOff } from "lucide-react";

import { useForm } from "react-hook-form";

import { zodResolver } from "@hookform/resolvers/zod";
import {
  RegistrationFormSchema,
  RegistrationFormValues,
} from "@/lib/formSchemas/authFormSchema";

import { Link } from "react-router-dom";

import { useRegister } from "@/api/authApi";

const RegistrationPage = () => {
  const registerMutation = useRegister();
  const [showPassword, setShowPassword] = React.useState(false);
  const form = useForm<RegistrationFormValues>({
    resolver: zodResolver(RegistrationFormSchema),
    defaultValues: {
      full_name: "",
      user_name: "",
      email: "",
      phone_number: "",
      password: "",
    },
    mode: "onSubmit",
  });

  function onSubmit(data: RegistrationFormValues) {
    registerMutation.mutate(data);
  }

  return (
    <div className="w-full h-screen flex justify-center items-center bg-background dark:bg-dark_bg text-foreground">
      <Card className="w-[60vw] flex justify-center items-stretch rounded-md">
        <CardContent className="flex flex-col gap-3 basis-[60%] justify-center items-center p-6">
          <CardHeader className="flex justify-between items-center p-4">
            <h2 className="text-2xl font-semibold">Register</h2>
          </CardHeader>
          <CardContent className="w-full flex flex-col gap-3 ">
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="space-y-4 flex flex-col justify-center"
              >
                <FormField
                  control={form.control}
                  name="full_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormControl>
                        <Input placeholder="Full Name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="user_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormControl>
                        <Input placeholder="Username" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormControl>
                        <Input
                          placeholder="E-mail address"
                          type="email"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="phone_number"
                  render={({ field }) => (
                    <FormItem>
                      <FormControl>
                        <Input
                          placeholder="Phone number"
                          type="number"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <div className="relative">
                        <Input
                          type={showPassword ? "text" : "password"}
                          placeholder="Enter your password"
                          {...field}
                        />
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                          onClick={() => setShowPassword(!showPassword)}
                        >
                          {showPassword ? (
                            <EyeOff className="h-4 w-4 text-muted-foreground" />
                          ) : (
                            <Eye className="h-4 w-4 text-muted-foreground" />
                          )}
                        </Button>
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="mx-auto flex flex-col gap-6">
                  <Button type="submit" disabled={registerMutation.isPending} className="px-10">
                    Register
                  </Button>

                  <Label htmlFor="navigateLogin">
                    Already have an account?{" "}
                    <Link to={"/login"}>
                      <span className="underline">Login</span>
                    </Link>
                  </Label>
                </div>
              </form>
            </Form>
          </CardContent>
        </CardContent>
        <div className="flex basis-[40%] isolate rounded-r-md">
          <div
            className="z-0 w-full rounded-r-md"
            style={{
              backgroundImage: "url(/src/assets/auth/login.png)",
              objectFit: "contain",
              backgroundRepeat: "no-repeat",
              backgroundPosition: "center",
            }}
          />
        </div>
      </Card>
    </div>
  );
};

export default RegistrationPage;
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useParams } from "react-router-dom";
import { usePasswordReset } from "@/api/authApi";
import {
  Form,
  FormField,
  FormItem,
  FormMessage,
} from "@/components/shadcn/form";
import { Input } from "@/components/shadcn/input";
import { Button } from "@/components/shadcn/button";
import { Card, CardContent, CardHeader } from "@/components/shadcn/card";
import * as React from "react";
import { Eye, EyeOff } from "lucide-react";

const resetSchema = z
  .object({
    token: z.string().nonempty("Token not received"),
    password: z
      .string()
      .min(8, "Password must be at least 8 characters")
      .regex(/[A-Z]/, "Password must contain at least one uppercase letter")
      .regex(/[a-z]/, "Password must contain at least one lowercase letter")
      .regex(/[0-9]/, "Password must contain at least one number"),
    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

const ResetPasswordPage = () => {
  const [showPassword, setShowPassword] = React.useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = React.useState(false);

  const { token } = useParams();
  const form = useForm({
    resolver: zodResolver(resetSchema),
    defaultValues: {
      token: token || "",
      password: "",
      confirmPassword: "",
    },
  });
  const resetMutation = usePasswordReset();
  const onSubmit = (data: z.infer<typeof resetSchema>) => {
    resetMutation.mutate(data);
  };

  return (
    <div className="w-full h-screen center bg-background dark:bg-dark_bg text-foreground">
      <Card className="sm:w-[60vw] md:w-[50vw] lg:w-[40vw] min-h-[60vh] center rounded-md">
        <CardContent className="center flex-col gap-3 w-full p-6">
          <CardHeader className="flex justify-between items-center p-4">
            <h2 className="text-2xl font-semibold">Reset Password</h2>
          </CardHeader>
          <CardContent className="w-full flex flex-col gap-3 ">
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="space-y-4"
              >
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <div className="relative">
                        <Input
                          type={showPassword ? "text" : "password"}
                          placeholder="Password"
                          {...field}
                        />
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                          onClick={() => setShowPassword(!showPassword)}
                        >
                          {showPassword ? (
                            <EyeOff className="h-4 w-4 text-muted-foreground" />
                          ) : (
                            <Eye className="h-4 w-4 text-muted-foreground" />
                          )}
                        </Button>
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="confirmPassword"
                  render={({ field }) => (
                    <FormItem>
                      <div className="relative">
                        <Input
                          type={showConfirmPassword ? "text" : "password"}
                          placeholder="Confirm Password"
                          {...field}
                        />
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                          onClick={() =>
                            setShowConfirmPassword(!showConfirmPassword)
                          }
                        >
                          {showPassword ? (
                            <EyeOff className="h-4 w-4 text-muted-foreground" />
                          ) : (
                            <Eye className="h-4 w-4 text-muted-foreground" />
                          )}
                        </Button>
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <Button type="submit" disabled={resetMutation.isPending}>
                  {resetMutation.isPending
                    ? "Resetting Password"
                    : "Reset Password"}
                </Button>
              </form>
            </Form>
          </CardContent>
        </CardContent>
      </Card>
    </div>
  );
};

export default ResetPasswordPage;
// src/pages/auth/LoginPage.tsx
import * as React from "react";
import { Card, CardContent, CardHeader } from "@/components/shadcn/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from "@/components/shadcn/form";
import { Input } from "@/components/shadcn/input";
import { Button } from "@/components/shadcn/button";
import { Label } from "@/components/shadcn/label";

import { EyeOff, Eye } from "lucide-react";

import { zodResolver } from "@hookform/resolvers/zod";
import {
  LoginFormSchema,
  LoginFormValues,
} from "@/lib/formSchemas/authFormSchema";

import { useForm } from "react-hook-form";

import { Link } from "react-router-dom";

import { useLogin } from "@/api/authApi";

// Simplified form schema

const LoginPage = () => {
  const [showPassword, setShowPassword] = React.useState(false);
  const loginMutation = useLogin();
  const form = useForm<LoginFormValues>({
    resolver: zodResolver(LoginFormSchema),
    defaultValues: {
      user_name: "",
      password: "",
    },
    mode: "onSubmit",
  });

  function onSubmit(data: LoginFormValues) {
    loginMutation.mutate(data);
  }

  return (
    <div className="w-full h-screen flex justify-center items-center bg-background dark:bg-dark_bg text-foreground">
      <Card className="w-[60vw] min-h-[60vh] flex justify-center items-stretch rounded-md">
        <CardContent className="flex flex-col gap-3 basis-[60%] justify-center items-center p-6">
          <CardHeader className="flex justify-between items-center p-4">
            <h2 className="text-2xl font-semibold">Login</h2>
          </CardHeader>
          <CardContent className="w-full flex flex-col gap-3 ">
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="space-y-3 flex flex-col justify-center"
              >
                {/* Email/Username Field */}
                <FormField
                  control={form.control}
                  name="user_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormControl>
                        <Input placeholder="E-mail/ Username" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Password Field */}
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <div className="relative">
                        <Input
                          type={showPassword ? "text" : "password"}
                          placeholder="Password"
                          {...field}
                        />
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                          onClick={() => setShowPassword(!showPassword)}
                        >
                          {showPassword ? (
                            <EyeOff className="h-4 w-4 text-muted-foreground" />
                          ) : (
                            <Eye className="h-4 w-4 text-muted-foreground" />
                          )}
                        </Button>
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Label htmlFor="password-reset">
                  <Link to={"/auth/forget-password"}>
                    <span className="underline">Forgot Password?</span>
                  </Link>
                </Label>
                {/* Submit Button */}
                <div className="mx-auto pt-5 flex flex-col gap-6">
                  <Button
                    type="submit"
                    disabled={loginMutation.isPending}
                    className="mx-auto px-10"
                  >
                    Login
                  </Button>
                  <Label htmlFor="navigateLogin">
                    Not registered yet?{" "}
                    <Link to={"/register"}>
                      <span className="underline">Register</span>
                    </Link>
                  </Label>
                </div>
              </form>
            </Form>
          </CardContent>
        </CardContent>
        <div className="flex basis-[40%] isolate rounded-r-md">
          <div
            className="z-0 w-full rounded-r-md"
            style={{
              backgroundImage: "url(/src/assets/auth/login.png)",
              objectFit: "contain",
              backgroundRepeat: "no-repeat",
              backgroundPosition: "center",
            }}
          />
        </div>
      </Card>
    </div>
  );
};

export default LoginPage;
// src/pages/auth/InitResetPage.tsx
import { Card, CardContent, CardHeader } from "@/components/shadcn/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from "@/components/shadcn/form";
import { Input } from "@/components/shadcn/input";
import { Button } from "@/components/shadcn/button";
import { Label } from "@/components/shadcn/label";

import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import { useForm } from "react-hook-form";
import { Link } from "react-router-dom";

import { useForgetPassword } from "@/api/authApi";

// Simplified form schema
const FormSchema = z.object({
  email: z.string().email({ message: "Invalid email format." }),
});

const ForgetPasswordPage = () => {
  const forgetMutation = useForgetPassword();
  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      email: "",
    },
    mode: "onSubmit",
  });

  function onSubmit(data: z.infer<typeof FormSchema>) {
    forgetMutation.mutate(data);
  }

  return (
    <div className="w-full h-screen center bg-background dark:bg-dark_bg text-foreground">
      <Card className="sm:w-[60vw] md:w-[50vw] lg:w-[40vw] min-h-[60vh] center rounded-md">
        <CardContent className="center flex-col gap-3 w-full p-6">
          <CardHeader className="flex justify-between items-center p-4">
            <h2 className="text-2xl font-semibold">Password Reset Request</h2>
          </CardHeader>
          <CardContent className="w-full flex flex-col gap-3 ">
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="space-y-3 flex flex-col justify-center"
              >
                {/* Email/Username Field */}
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormControl>
                        <Input
                          placeholder="Registered email address"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Label htmlFor="user-login">
                  <Link to={"/login"}>
                    <span className="underline">Remember Password?</span>
                  </Link>
                </Label>
                {/* Submit Button */}
                <div className="mx-auto pt-5 flex flex-col gap-6">
                  <Button
                    type="submit"
                    className="mx-auto px-10"
                    disabled={forgetMutation.isPending}
                  >
                    {forgetMutation.isPending ? (
                      <span>Sending Reset Link</span> // Replace with a spinner or other loading indicator
                    ) : (
                      "Send Reset Link"
                    )}
                  </Button>
                </div>
              </form>
            </Form>
          </CardContent>
        </CardContent>
      </Card>
    </div>
  );
};

export default ForgetPasswordPage;
const DashboardPage = () => {
  return (
    <div className="w-full min-h-screen bg-green-400">Rohan</div>
  )
}

export default DashboardPageimport { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/shadcn/button";
import { Input } from "@/components/shadcn/input";
import { Calendar } from "@/components/shadcn/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/shadcn/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/shadcn/select";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/shadcn/form";
import { format } from "date-fns";
import { CalendarIcon } from "lucide-react";
import {
  MovieFormValues,
  movieSchema,
} from "@/lib/formSchemas/movieFormSchema";
import { useAddMovie } from "@/api/movieApi";

const MovieForm = () => {
  const movieMutation = useAddMovie();
  const form = useForm<MovieFormValues>({
    resolver: zodResolver(movieSchema),
    defaultValues: {
      name: "",
      category: "Nepali",
      description: "",
      releaseDate: new Date(),
      duration_min: 0,
      language: "Nepali",
      posterURL: {
        sm: "", // Small poster URL
        lg: "", // Large poster URL
      },
      trailerURL: "",
      status: "upcoming",
    },
  });

  const onSubmit = async (values: MovieFormValues) => {
    movieMutation.mutate(values);
  };

  const getYouTubeThumbnail = (url: string) => {
    const videoId = url.split("v=")[1]?.split("&")[0];
    return videoId
      ? `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`
      : "";
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-2xl mx-auto">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            {/* Trailer Section */}
            <div className="bg-white rounded-lg shadow-sm overflow-hidden">
              <FormField
                control={form.control}
                name="trailerURL"
                render={({ field }) => (
                  <FormItem className="space-y-0">
                    <div className="aspect-video w-full bg-gray-900">
                      {field.value ? (
                        <img
                          src={
                            getYouTubeThumbnail(field.value) ||
                            "/placeholder.svg"
                          }
                          alt="Trailer Thumbnail"
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center text-gray-400">
                          Movie Trailer Preview
                        </div>
                      )}
                    </div>
                    <FormControl>
                      <Input
                        placeholder="Enter YouTube trailer URL"
                        {...field}
                        className="border-x-0 border-b-0 rounded-none"
                      />
                    </FormControl>
                    <FormMessage className="p-2" />
                  </FormItem>
                )}
              />
            </div>

            <div className="relative">
              {/* Poster Section - Left Side */}
              <div className="absolute left-4 -top-4 w-[180px]">
                <div className="space-y-4">
                  {/* Small Poster */}
                  <FormField
                    control={form.control}
                    name="posterURL.sm"
                    render={({ field }) => (
                      <FormItem className="bg-white rounded-lg shadow-sm overflow-hidden">
                        <div className="aspect-[2/3] w-full bg-gray-100">
                          {field.value ? (
                            <img
                              src={field.value || "/placeholder.svg"}
                              alt="Small Movie Poster"
                              className="w-full h-full object-cover"
                            />
                          ) : (
                            <div className="w-full h-full flex items-center justify-center text-gray-400">
                              Small Poster
                            </div>
                          )}
                        </div>
                        <FormControl>
                          <Input
                            placeholder="Small Poster URL"
                            {...field}
                            className="border-x-0 border-b-0 rounded-none text-sm"
                          />
                        </FormControl>
                        <FormMessage className="p-2" />
                      </FormItem>
                    )}
                  />

                  {/* Large Poster */}
                  <FormField
                    control={form.control}
                    name="posterURL.lg"
                    render={({ field }) => (
                      <FormItem className="bg-white rounded-lg shadow-sm overflow-hidden">
                        <div className="aspect-[2/3] w-full bg-gray-100">
                          {field.value ? (
                            <img
                              src={field.value || "/placeholder.svg"}
                              alt="Large Movie Poster"
                              className="w-full h-full object-cover"
                            />
                          ) : (
                            <div className="w-full h-full flex items-center justify-center text-gray-400">
                              Large Poster
                            </div>
                          )}
                        </div>
                        <FormControl>
                          <Input
                            placeholder="Large Poster URL"
                            {...field}
                            className="border-x-0 border-b-0 rounded-none text-sm"
                          />
                        </FormControl>
                        <FormMessage className="p-2" />
                      </FormItem>
                    )}
                  />
                </div>
              </div>

              {/* Details Section - Right Side */}
              <div className="ml-[200px] space-y-6">
                <div className="grid grid-cols-2 gap-4 bg-white p-6 rounded-lg shadow-sm">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem className="col-span-2">
                        <FormLabel>Movie Name</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="category"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Category</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Nepali">Nepali</SelectItem>
                            <SelectItem value="Bollywood">Bollywood</SelectItem>
                            <SelectItem value="Hollywood">Hollywood</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="releaseDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Release Date</FormLabel>
                        <Popover>
                          <PopoverTrigger asChild>
                            <FormControl>
                              <Button variant="outline" className="w-full">
                                <CalendarIcon className="mr-2 h-4 w-4" />
                                {field.value
                                  ? format(field.value, "PPP")
                                  : "Pick a date"}
                              </Button>
                            </FormControl>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={field.value}
                              onSelect={field.onChange}
                            />
                          </PopoverContent>
                        </Popover>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="duration_min"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Duration (minutes)</FormLabel>
                        <FormControl>
                          <Input
                            type="number"
                            {...field}
                            onChange={(e) =>
                              field.onChange(Number(e.target.value))
                            }
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="language"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Language</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Nepali">Nepali</SelectItem>
                            <SelectItem value="Hindi">Hindi</SelectItem>
                            <SelectItem value="English">English</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Description Section */}
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem className="bg-white p-6 rounded-lg shadow-sm">
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <textarea
                          {...field}
                          className="w-full min-h-[120px] p-3 border rounded-md resize-y"
                          placeholder="Enter movie description"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            {/* Submit Button */}
            <Button
              type="submit"
              disabled={movieMutation.isPending}
              className="w-full"
            >
              {movieMutation.isPending ? "Adding Movie ..." : "Add Movie"}
            </Button>
          </form>
        </Form>
      </div>
    </div>
  );
};

export default MovieForm;
import { useEffect, useRef, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Volume2, VolumeX, Play } from "lucide-react";
import { Button } from "@/components/shadcn/button";
import { MovieDetailsSkeleton } from "@/components/skeletons/movie";
import { useFetchMovieBySlug } from "@/api/movieApi";
import { useParams } from "react-router-dom";
import { decodeHTMLEntities } from "@/utils/htmlDecoder";

export default function MovieDetails() {
  const { slug } = useParams();
  const [isHovered, setIsHovered] = useState<boolean>(false);
  const [isMuted, setIsMuted] = useState<boolean>(true); // Start muted
  const [isPlaying, setIsPlaying] = useState<boolean>(true);
  const [showVideo, setShowVideo] = useState<boolean>(true);
  const playerRef = useRef<YT.Player | null>(null);
  const playerContainerRef = useRef<HTMLDivElement>(null);
  const [selectedDate, setSelectedDate] = useState("20 Nov");
  const [isPlayerReady, setIsPlayerReady] = useState(false);
  const hasInteracted = useRef<boolean>(false);

  const { data: movie, isLoading } = useFetchMovieBySlug(slug || "");

  // Initialize YouTube Player
  useEffect(() => {
    if (!movie?.trailerURL) return;

    let isApiLoaded = false;

    const initializePlayer = () => {
      const videoId = getYouTubeVideoId(movie.trailerURL!);
      if (!videoId || !playerContainerRef.current) return;

      playerRef.current = new window.YT.Player(playerContainerRef.current, {
        videoId,
        playerVars: {
          autoplay: 1,
          controls: 0,
          modestbranding: 0,
          rel: 0,
          showinfo: 0,
          mute: 1, // Start muted to comply with autoplay policies
          enablejsapi: 1,
          loop: 1
        },
        events: {
          onReady: (event) => {
            setIsPlayerReady(true);
            event.target.playVideo();
            setIsPlaying(true);
            // If user has already interacted, unmute the video
            if (hasInteracted.current) {
              event.target.unMute();
              setIsMuted(false);
            }
          },
          onStateChange: (event) => {
            if (event.data === window.YT.PlayerState.ENDED) {
              event.target.playVideo(); // Loop the video
            }
          }
        }
      });
    };

    if (window.YT && window.YT.Player) {
      initializePlayer();
    } else {
      // Load the API if it hasn't been loaded yet
      if (!isApiLoaded) {
        const tag = document.createElement("script");
        tag.src = "https://www.youtube.com/iframe_api";
        const firstScriptTag = document.getElementsByTagName("script")[0];
        firstScriptTag.parentNode?.insertBefore(tag, firstScriptTag);

        window.onYouTubeIframeAPIReady = () => {
          isApiLoaded = true;
          initializePlayer();
        };
      }
    }

    return () => {
      if (playerRef.current) {
        playerRef.current.destroy();
        setIsPlayerReady(false);
      }
    };
  }, [movie?.trailerURL]);

  // Handle user interaction and unmute
  useEffect(() => {
    const handleInteraction = () => {
      hasInteracted.current = true;
      if (playerRef.current && isPlayerReady && isMuted) {
        playerRef.current.unMute();
        setIsMuted(false);
      }
      // Remove listeners after first interaction
      document.removeEventListener('click', handleInteraction);
      document.removeEventListener('keydown', handleInteraction);
    };

    document.addEventListener('click', handleInteraction);
    document.addEventListener('keydown', handleInteraction);

    return () => {
      document.removeEventListener('click', handleInteraction);
      document.removeEventListener('keydown', handleInteraction);
    };
  }, [isPlayerReady, isMuted]);

  // Handle scroll-based video visibility and playback
  useEffect(() => {
    const handleScroll = () => {
      const shouldShowVideo = window.scrollY === 0;
      setShowVideo(shouldShowVideo);

      if (playerRef.current && isPlayerReady) {
        if (shouldShowVideo) {
          playerRef.current.playVideo();
          setIsPlaying(true);
        } else {
          playerRef.current.pauseVideo();
          setIsPlaying(false);
        }
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [isPlayerReady]);

  // Handle mute/unmute
  const toggleMute = () => {
    if (playerRef.current && isPlayerReady) {
      if (isMuted) {
        playerRef.current.unMute();
        hasInteracted.current = true; // Mark that user has interacted
      } else {
        playerRef.current.mute();
      }
      setIsMuted(!isMuted);
    }
  };

  // Handle play/pause
  const togglePlayPause = () => {
    if (playerRef.current && isPlayerReady) {
      if (isPlaying) {
        playerRef.current.pauseVideo();
      } else {
        playerRef.current.playVideo();
      }
      setIsPlaying(!isPlaying);
    }
  };

  const getYouTubeVideoId = (url: string) => {
    const decodedUrl = decodeHTMLEntities(url);
    const urlParams = new URLSearchParams(new URL(decodedUrl).search);
    return urlParams.get("v");
  };

  if (isLoading) {
    return <MovieDetailsSkeleton />;
  }

  if (!movie) {
    return <div className="text-center text-white">Movie not found</div>;
  }

  const dates = [
    { day: "WED", date: "20 Nov", active: true },
    { day: "THU", date: "21 Nov" },
    { day: "FRI", date: "22 Nov" },
    { day: "SAT", date: "23 Nov" },
    { day: "SUN", date: "24 Nov" },
    { day: "MON", date: "25 Nov" },
  ];

  return (
    <div className="min-h-screen bg-black text-white">
      <div
        className="relative h-[87vh] overflow-hidden"
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <AnimatePresence>
          {showVideo && movie.trailerURL ? (
            <motion.div
              initial={{ opacity: 1 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="absolute inset-0 bg-black w-full h-full"
            >
              <div ref={playerContainerRef} className="w-full h-full" />
            </motion.div>
          ) : (
            <motion.img
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              src={movie.posterURL?.lg || "/kanathara.png"}
              alt={movie.name}
              className="absolute inset-0 w-full h-full object-cover"
            />
          )}
        </AnimatePresence>
        <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent">
          <div className="absolute bottom-8 left-24 px-8">
            <motion.h1
              className="text-6xl font-bold mb-4"
              animate={{ scale: isHovered ? 1.12 : 1 }}
              transition={{ duration: 0.3 }}
            >
              {movie.name || "Unknown Movie"}
            </motion.h1>
            <div className="flex gap-4 mt-8">
              <Button variant="default" size="lg">
                Take a seat
              </Button>
              <Button
                variant="outline"
                size="lg"
                className="text-secondary-foreground"
                onClick={togglePlayPause}
              >
                <Play className="w-4 h-4 mr-2" />
                {isPlaying ? 'Pause trailer' : 'Play trailer'}
              </Button>
            </div>
          </div>
          <Button
            variant="outline"
            size="icon"
            className="absolute bottom-4 right-10 bg-black/50 hover:bg-black/70"
            onClick={toggleMute}
          >
            {isMuted ? (
              <VolumeX className="h-4 w-4" />
            ) : (
              <Volume2 className="h-4 w-4" />
            )}
          </Button>
        </div>
      </div>
      <div className="max-w-7xl mx-auto px-8 pt-4 pb-12">
        <div className="grid gap-8 md:grid-cols-[2fr,1fr]">
          <div>
            <h2 className="text-xl font-semibold mb-4">Description</h2>
            <p className="text-gray-400">
              {movie.description || "No description available."}
            </p>
            <div className="mt-8">
              <h2 className="text-xl font-semibold mb-4">Ticket Schedules</h2>
              <div className="flex gap-2 overflow-x-auto pb-4">
                {dates.map(({ day, date }) => (
                  <Button
                    key={date}
                    variant={selectedDate === date ? "default" : "outline"}
                    className="flex-col py-8"
                    onClick={() => setSelectedDate(date)}
                  >
                    <span className="text-sm">{day}</span>
                    <span className="text-lg font-semibold">
                      {date.split(" ")[0]}
                    </span>
                  </Button>
                ))}
              </div>
            </div>
            <div className="mt-8">
              <h2 className="text-xl font-semibold mb-4">Select Cinema</h2>
              <Button variant="outline" className="w-full justify-between">
                Cinema XXI Ambarukmo Plaza
                <span className="text-gray-400">▼</span>
              </Button>
            </div>
          </div>
          <div className="space-y-8">
            <div>
              <h3 className="text-sm text-gray-400 mb-2">Released Year</h3>
              <p>{new Date(movie.releaseDate).getFullYear() || "N/A"}</p>
            </div>
            <div>
              <h3 className="text-sm text-gray-400 mb-2">
                Available Languages
              </h3>
              <div className="flex flex-wrap gap-2">
                {[movie.language || "English"].map((lang: string) => (
                  <span key={lang} className="text-sm">
                    {lang}
                  </span>
                ))}
              </div>
            </div>
            <div>
              <h3 className="text-sm text-gray-400 mb-2">Ratings</h3>
              <div className="flex gap-8">
                <div>
                  <div className="font-semibold">IMDb</div>
                  <div className="flex items-center gap-1">
                    {"★★★★☆".split("").map((star, i) => (
                      <span key={i} className="text-yellow-500">
                        {star}
                      </span>
                    ))}
                    <span className="ml-1">4.5</span>
                  </div>
                </div>
                <div>
                  <div className="font-semibold">Streamvibe</div>
                  <div className="flex items-center gap-1">
                    {"★★★★☆".split("").map((star, i) => (
                      <span key={i} className="text-yellow-500">
                        {star}
                      </span>
                    ))}
                    <span className="ml-1">4</span>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <h3 className="text-sm text-gray-400 mb-2">Genres</h3>
              <div className="flex gap-2">
                <span className="text-sm">Action</span>
                <span className="text-sm">Adventure</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
// src/components/common/ErrorFallback.tsx
"use client";

import { cn } from "@/lib/utils";
import { DotPattern } from "@/components/shadcn/dot-pattern";
import { useNavigate } from "react-router-dom";
import InteractiveHoverButton from "@/components/shadcn/interactive-hover-button";
import { ArrowRight } from "lucide-react";

const NotFoundPage = () => {
  const navigate = useNavigate();
  return (
    <div className="relative center h-screen w-full flex-col overflow-hidden bg-background md:shadow-xl gap-10">
      <div className="size-[150px]">
        <img src="src/assets/icons/logo/Logo.png" className="grayscale" />
      </div>
      <span className="text-primary text-2xl font-semibold">
        This page doesn't exist !
      </span>
      <InteractiveHoverButton
        className="w-52 bg-stone-600"
        icon={<ArrowRight />}
        onClick={() => {
          navigate("/");
        }}
        text="Head back"
      ></InteractiveHoverButton>
      <DotPattern
        className={cn(
          "[mask-image:radial-gradient(300px_circle_at_center,white,transparent)]"
        )}
      />
    </div>
  );
};

export 
default NotFoundPage;
import { cn } from "@/lib/utils";
import { DotPattern } from "@/components/shadcn/dot-pattern";
import { useNavigate } from "react-router-dom";
import InteractiveHoverButton from "@/components/shadcn/interactive-hover-button";
import { ArrowRight } from "lucide-react";

const UnauthorizedPage = () => {
  const navigate = useNavigate();
  
  return (
    <div className="relative center h-screen w-full flex-col overflow-hidden bg-background md:shadow-xl gap-10">
      <div className="size-[150px]">
        <img src="src/assets/icons/logo/Logo.png" className="grayscale" />
      </div>
      <span className="text-primary text-2xl font-semibold text-wrap">
        You dont have authority to access this page!
      </span>
      <div className="flex flex-col sm:flex-row gap-5">
        <InteractiveHoverButton
          className="w-52 bg-stone-600"
          icon={<ArrowRight />}
          onClick={() => {
            navigate("/");
          }}
          text="Head back"
        />
        <InteractiveHoverButton
          className="w-60 bg-stone-600"
          icon={<ArrowRight />}
          onClick={() => {
            navigate("/login", {
              state: { 
                from: '/unauthorized',
                getPermission: true
              }
            });
          }}
          text="Get Permission"
        />
      </div>
      <DotPattern
        className={cn(
          "[mask-image:radial-gradient(300px_circle_at_center,white,transparent)]"
        )}
      />
    </div>
  );
};

export default UnauthorizedPage;import { useProfileImageUpload } from "@/api/authApi";
import ImageUploader from "@/components/common/ImageUploader";
import { useAuth } from "@/hooks/useAuth";
import { getNameInitials } from "@/utils/getNameInitials";

const ProfileUpload = () => {
  const { user } = useAuth();
  const { mutate: uploadImage, isPending } = useProfileImageUpload();
  return (
    <ImageUploader
      uploadFn={uploadImage}
      imageURL={user?.profile_URL}
      fallbackText={getNameInitials(user?.full_name || "")}
      isUploading={isPending}
      buttonText="Profile Image"
    />
  );
};

export default ProfileUpload;
// import TheatreForm from "@/components/common/theatre/theatreForm/TheatreForm";

import DistributorForm from "@/components/common/distributor/distributorForm/distributorForm";
import DistributorsTable from "@/components/common/distributor/distributorTable";

const TestPage = () => {
  return (
    <div>
      {/* <DistributorsTable /> */}
      <DistributorForm />
    </div>
  );
};
export default TestPage;
import { FinalTheatreData } from "@/components/common/theatre/theatreForm/TheatreForm";
import { Theatre } from "@/interfaces/ITheatre";
import { axiosInstance } from "@/utils/axiosInstance";

export async function addTheatre(theatreDetails: FinalTheatreData) {
  const response = await axiosInstance.post("/theatre/add", theatreDetails);
  return response.data;
}

export const fetchAllTheatres = async (): Promise<Theatre[]> => {
  const url = "/theatre/getAll";
  const response = await axiosInstance.get(url);

  if (!response.data?.theatres) {
    return [];
  }
  return response.data.theatres;
};

export async function deleteTheatre(id: string) {
  const response = await axiosInstance.delete(`/theatre/delete/${id}`);
  return response.data;
}
import { ImageUploadResponse } from "@/interfaces/auth/IImage";
import {
  DistributorBase,
  DistributorLogoRequest,
  DistributorResponse,
} from "@/interfaces/Idistributor";
import { axiosInstance } from "@/utils/axiosInstance";

export async function addDistributor(credentials: DistributorBase) {
  const { data } = await axiosInstance.post("/distributor/add", credentials);
  return data;
}

export const fetchAllDistributors = async (): Promise<
  DistributorResponse[]
> => {
  const url = "/distributor/getAll";
  const response = await axiosInstance.get(url);

  if (!response.data?.distributors) {
    return [];
  }
  return response.data.distributors;
};

export async function deleteDistributor(id: string) {
  const response = await axiosInstance.delete(`/distributor/delete/${id}`);
  return response.data;
}

export const uploadDistributorLogo = async ({
  image,
  currentImageUrl,
  distributorId,
}: DistributorLogoRequest): Promise<ImageUploadResponse> => {
  const formData = new FormData();
  formData.append("image", image);
  formData.append("distributorId", distributorId);
  if (currentImageUrl) {
    formData.append("currentImageUrl", currentImageUrl);
  }

  const response = await axiosInstance.patch<ImageUploadResponse>(
    "/distributor/upload",
    formData,
    {
      headers: { "Content-Type": "multipart/form-data" },
    }
  );
  return response.data;
};
import { axiosInstance } from "@/utils/axiosInstance";
import {
  LoginCredentials,
  RegistrationCredentials,
  ResetCredentials,
} from "@/interfaces/auth/IAuthCredentials";

import {
  ImageUploadRequest,
  ImageUploadResponse,
} from "@/interfaces/auth/IImage";

export async function loginUser(credentials: LoginCredentials) {
  const { data } = await axiosInstance.post("/auth/login", credentials);
  return data;
}
export async function registerUser(credentials: RegistrationCredentials) {
  const { data } = await axiosInstance.post("/auth/register", credentials);
  return data;
}

export async function sendResetEmail(credentials: { email: string }) {
  const { data } = await axiosInstance.post(
    "/auth/forget-password/",
    credentials
  );
  return data;
}

export async function resetPassword(credentials: ResetCredentials) {
  const { data } = await axiosInstance.post(
    "/auth/reset-password/",
    credentials
  );
  return data;
}

export const uploadProfileImage = async ({
  image,
  currentImageUrl,
}: ImageUploadRequest): Promise<ImageUploadResponse> => {
  const formData = new FormData();
  formData.append("image", image);

  if (currentImageUrl) {
    formData.append("currentImageUrl", currentImageUrl);
  }

  const response = await axiosInstance.patch<ImageUploadResponse>(
    "/auth//user/upload",
    formData,
    {
      headers: { "Content-Type": "multipart/form-data" },
    }
  );

  return response.data;
};
import {
  CreateHallRequest,
  CreateHallResponse,
  Hall,
} from "@/interfaces/IHalls";
import { axiosInstance } from "@/utils/axiosInstance";

export const hallService = {
  createHall: async (data: CreateHallRequest): Promise<CreateHallResponse> => {
    const response = await axiosInstance.post<CreateHallResponse>(
      "/hall/add",
      data
    );
    return response.data;
  },
  getHallLayout: async (hallId: string): Promise<Hall> => {
    const response = await axiosInstance.get(`/hall/${hallId}`);
    return response.data;
  },
  getAllHalls: async (): Promise<Hall[]> => {
    const response = await axiosInstance.get(`/hall/getAll`);
    return response.data;
  },
  deleteHall: async (id: string) => {
    const response = await axiosInstance.delete(`/hall/delete/${id}`);
    return response.data;
  },

  updateHall: async (updatedHallData: Hall) => {
    const response = await axiosInstance.patch(
      `/hall/update/${updatedHallData._id}`,
      updatedHallData
    );
    return response.data;
  },

  toggleHallStatus: async (id: string): Promise<Hall> => {
    const response = await axiosInstance.patch(`/hall/toggle/${id}`);
    return response.data.hall;
  },
};
// src/service/movieService.ts
import { axiosInstance } from "@/utils/axiosInstance";
import { MovieFormValues } from "@/lib/formSchemas/movieFormSchema";
import { format } from "date-fns";
import { decodeHTMLEntities } from "@/utils/htmlDecoder";
import { Movie } from "@/interfaces/IMovie";

export const fetchAllMoviesbyStatus = async (
  variant: string
): Promise<Movie[]> => {
  const url = `/movie/status/${variant}`;
  const response = await axiosInstance.get(url);

  // If the response data is undefined or null, return an empty array
  if (!response.data?.movies) {
    return [];
  }

  // Decode HTML entities in the URLs
  const decodedMovies = response.data.movies.map((movie: Movie) => ({
    ...movie,
    posterURL: {
      sm: decodeHTMLEntities(movie.posterURL.sm),
      lg: decodeHTMLEntities(movie.posterURL.lg),
    },
    trailerURL: decodeHTMLEntities(movie.trailerURL),
  }));

  return decodedMovies;
};
export const fetchAllMovies = async (): Promise<Movie[]> => {
  const url = "/movie/getAll";
  const response = await axiosInstance.get(url);

  if (!response.data?.movies) {
    return [];
  }

  // Decode HTML entities in the URLs
  const decodedMovies = response.data.movies.map((movie: Movie) => ({
    ...movie,
    posterURL: {
      sm: decodeHTMLEntities(movie.posterURL.sm),
      lg: decodeHTMLEntities(movie.posterURL.lg),
    },
    trailerURL: decodeHTMLEntities(movie.trailerURL),
  }));

  return decodedMovies;
};

export async function addMovie(credentials: MovieFormValues) {
  const payload = {
    ...credentials,
    releaseDate: format(credentials.releaseDate, "yyyy-MM-dd"),
  };
  const { data } = await axiosInstance.post("/movie/add", payload);
  return data;
}

export async function fetchMovieBySlug(slug: string) {
  try {
    const response = await axiosInstance.get(`/movie/${slug}`);

    if (!response.data?.movie) {
      throw new Error("No movie found");
    }

    const movie = response.data.movie;

    // Decode HTML entities in URLs
    return movie;
  } catch (error) {
    console.error("Error fetching movie details:", error);
    return null;
  }
}
import { createContext, useEffect, useState, useMemo } from "react";
import { axiosInstance } from "@/utils/axiosInstance";
import { AuthContextType, IUser } from "@/interfaces/auth/IAuthContext";

const AuthContext = createContext<AuthContextType | null>(null);
export default AuthContext;

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<IUser | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  // Function to fetch user data
  const checkAuthStatus = async () => {
    try {
      // Call the server to check authentication status
      const { data } = await axiosInstance.get("/auth/user/status");
      setUser(data.user);
      setIsAuthenticated(true);
    } catch (error) {
      console.error("Error fetching user data:", error); // Debugging log
      setUser(null);
      setIsAuthenticated(false);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    checkAuthStatus();
  }, []); // Empty dependency array ensures this runs only once on mount

  // Logout function
  const logout = async () => {
    try {
      await axiosInstance.post("/auth/logout");
    } finally {
      setUser(null);
      setIsAuthenticated(false);
      window.location.href = "/login";
    }
  };

  // Memoize the context value to prevent unnecessary re-renders
  const contextValue = useMemo(
    () => ({
      user,
      isAuthenticated,
      isLoading,
      checkAuthStatus,
      logout,
    }),
    [user, isAuthenticated, isLoading] // Only recompute if these values change
  );

  return (
    <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>
  );
}
declare module 'react-color-extractor' {
    import { ReactNode } from 'react';
  
    interface ColorExtractorProps {
      getColors: (colors: string[]) => void;
      children: ReactNode;
    }
  
    const ColorExtractor: (props: ColorExtractorProps) => JSX.Element;
    
    export { ColorExtractor };
  }// Define interfaces for the theatre data structure

// Interface for a single contact point within a theatre
interface TheatreContact {
  location: string;
  phoneNumbers: {
    type: string;
    number: string;
  }[];
  emails: {
    type: string;
    email: string;
  }[];
}

// Interface for a single location within a theatre
interface TheatreLocation {
  address: string;
  coordinates: {
    latitude: number;
    longitude: number;
  };
}

// Interface for the commission rate within a theatre
interface TheatreCommissionRate {
  address: string;
  rate: number;
}

// Interface for a theatre entity
export interface Theatre {
  _id: string;
  name: string;
  locations: TheatreLocation[];
  commissionRate: TheatreCommissionRate[];
  contacts: TheatreContact[];
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  __v: number;
}

// Interface for the API response containing an array of theatres
export interface TheatresResponse {
  theatres: Theatre[];
}export interface Movie {
  _id: string;
  name: string;
  slug:string;
  category: string;
  duration_min: string;
  language: string;
  description: string;
  posterURL: {
    sm: string;
    lg: string;
  };
  status: string;
  trailerURL: string;
  releaseDate: string;
}

export interface MovieSectionProps {
  variant: "showing" | "upcoming";
}
import { ImageUploadRequest } from "./auth/IImage";

// Coordinates used in a location
export interface Coordinates {
  latitude: number;
  longitude: number;
}

// A location is either an HQ or a Branch
export interface Location {
  type: "HQ" | "Branch";
  location: string;
  coordinates: Coordinates;
}

// Phone number type. Note the optional _id field which appears only in responses.
export interface PhoneNumber {
  type: string;
  number: string;
  _id?: string;
}

// Email type with an optional _id for responses.
export interface Email {
  type: string;
  email: string;
  _id?: string;
}

// A contact includes a location, phone numbers, and emails.
export interface Contact {
  location: string;
  phoneNumbers: PhoneNumber[];
  emails: Email[];
}

// Distribution rights for a movie
export interface DistributionRight {
  movieId: string;
  commissionRate: number;
  territories: string[];
  validFrom: string;
  validUntil: string;
}

/**
 * Base interface for a distributor.
 * This interface is used for both requests and responses,
 * so that your request payload (e.g. AddDistributorRequest) doesn’t include
 * extra fields (like _id or timestamps) that you only expect from the server.
 */
export interface DistributorBase {
  name: string;
  logo_URL?: string;
  commissionRate: number;
  isActive: boolean;
  locations: Location[];
  contacts: Contact[];
  distributionRights?: DistributionRight[];
}

// =====================
// Request Interfaces
// =====================

/**
 * Request to add a distributor.
 * It reuses DistributorBase since no extra fields are needed.
 */


// =====================
// Response Interfaces
// =====================

/**
 * Distributor response type.
 * It extends DistributorBase and adds fields that the server attaches,
 * such as the unique identifier and timestamps.
 */
export interface DistributorResponse extends DistributorBase {
  _id: string;
  createdAt: string;
  updatedAt: string;
  __v: number;
}


export interface AddDistributorResponse {
  Distributor: DistributorResponse;
  message: string;
}

export interface GetDistributorResponse {
  distributor: DistributorResponse[];
}

export interface DistributorLogoRequest extends ImageUploadRequest{
  distributorId:string;
}export interface IUser {
  full_name: string;
  user_name: string;
  email: string;
  profile_URL: string;
  role: string;
}

export enum ERoles {
  ADMIN = "ADMIN",
  EDITOR = "editor",
  VIEWER = "viewer",
  USER = "user",
}

export interface AuthContextType {
  user: IUser | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  checkAuthStatus: () => Promise<void>;
  logout: () => Promise<void>;
}
export type ImageFile = File;
export interface ImageUploadRequest {
  image: ImageFile;
  currentImageUrl?: string;
}

export interface ImageUploadResponse {
  message: string;
  imageUrl: string;
}
// src/interfaces/auth/IAuth.ts

export interface LoginCredentials {
  user_name: string;
  password: string;
}
export interface RegistrationCredentials {
  full_name: string;
  user_name: string;
  email: string;
  phone_number: string;
  password: string;
}

export interface ResetCredentials {
  token: string;
  password: string;
}

export interface SeatSection {
  rows: number;
  columns: number;
  startRow: string;
  startNumber: number;
}

export interface Layout {
  sections: SeatSection[];
}

export interface Hall {
  _id: string;
  theatreId: string;
  location: string;
  name: string;
  layout: Layout;
  totalSeats: number;
  isActive: boolean;
}

export interface CreateHallRequest {
  theatreId: string;
  location: string;
  name: string;
  layout: Layout;
  totalSeats: number;
}

export interface CreateHallResponse {
  message: string;
  hall: Hall;
}

export interface SectionState extends SeatSection {
  id: number;
  selectedSeats: Set<string>;
}
import { ERoles } from "./auth/IAuthContext";

export enum ELayouts {
  CLIENT = "default",
  ADMIN = "admin",
  NA = "none",
}

export interface IRouterConfig {
  [page: string]: IRouterMeta;
}

export interface IRouterMeta {
  path: string;
  layout: ELayouts;
  isProtected: boolean;
  roles?: ERoles[];
  componentLocation:string;
}
// src/App.tsx
import { Toaster } from "@/components/shadcn/sonner";
import { ThemeProvider } from "./components/common/theme-provider";
import Router from "./Router";

function App() {
  return (
    <ThemeProvider defaultTheme="system" storageKey="vite-ui-theme">
      <Router />
      <Toaster />
    </ThemeProvider>
  );
}

export default App;
// src/utils/lazyImporter.ts
import { lazy } from "react";

export const lazyImport = (componentLocation: string) => {
  const componentPath = `../${componentLocation}`;
  return lazy(() => import(componentPath).catch((error) => {
    console.error(`Failed to import component from ${componentPath}:`, error);
    throw error;
  }));
};




// src/utils/axiosInstance.ts
import { useAuth } from "@/hooks/useAuth";
import axios from "axios";

const baseURL = "http://localhost:8080/api/v1";

export const axiosInstance = axios.create({
  baseURL,
  withCredentials: true,
  headers: {
    "Content-Type": "application/json",
  },
});

axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // Check if the error is due to an expired or missing token
    if (error.response?.status === 401 && originalRequest.retryCount < 2) {
      originalRequest.retryCount = originalRequest.retryCount || 0;
      originalRequest.retryCount += 1;
      try {
        // Retry the original request with the new token
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        // If token refresh fails, clear the user state and redirect to login
        const { logout } = useAuth();
        await logout();
        window.location.href = "/login"; // Redirect to login page
        return Promise.reject(refreshError);
      }
    }

    // For other errors, reject the promise
    return Promise.reject(error);
  }
);export function getNameInitials(full_name: string): string {
    const separated_names = full_name.split(" ").map((name) => name.slice(0, 1)).join("");
    return separated_names;
  }export const decodeHTMLEntities = (url: string): string => {
    return url
      .replace(/&#x2F;/g, "/") // Replace &#x2F; with /
      .replace(/&amp;/g, "&"); // Replace &amp; with &
  };import { lazy, Suspense } from "react";
import { Routes, Route, Navigate } from "react-router-dom";
import { routeConfig } from "@/lib/routerConfig";
import { ELayouts } from "@/interfaces/IRouterConfig";
import LoadingFallback from "@/components/common/LoadingFallback";
import { useQueryErrorResetBoundary } from "@tanstack/react-query";
import { ErrorBoundary } from "react-error-boundary";
import ErrorFallback from "@/components/common/ErrorFallback";
import { lazyImport } from "@/utils/lazyImporter";
import ProtectedRoute from "./components/HOC/ProtectedRoute";

// Layout components
const layouts = {
  [ELayouts.CLIENT]: lazy(() => import("@/components/layouts/UserLayout")),
  [ELayouts.ADMIN]: lazy(() => import("@/components/layouts/AdminLayout")),
  [ELayouts.NA]: lazy(() => import("@/components/layouts/NoneLayout")),
};

const Router = () => {
  const { reset } = useQueryErrorResetBoundary();

  return (
    <Routes>
      {Object.entries(routeConfig).map(([key, config]) => {
        const Component = lazyImport(config.componentLocation);
        const LayoutComponent = layouts[config.layout];

        return (
          <Route
            key={config.path}
            path={config.path}
            element={
              <ProtectedRoute>
                <LayoutComponent>
                  <Suspense fallback={<LoadingFallback />}>
                    <ErrorBoundary
                      onReset={reset}
                      fallbackRender={({ resetErrorBoundary }) => (
                        <ErrorFallback
                          resetErrorBoundary={resetErrorBoundary}
                        />
                      )}
                    >
                      <Component />
                    </ErrorBoundary>
                  </Suspense>
                </LayoutComponent>
              </ProtectedRoute>
            }
          />
        );
      })}
      {/* Fallback route for undefined paths */}
      <Route path="*" element={<Navigate to="/404" replace />} />
    </Routes>
  );
};

export default Router;
import { ERoles } from "@/interfaces/auth/IAuthContext";
import { ELayouts, IRouterConfig } from "@/interfaces/IRouterConfig";

export const routeConfig: IRouterConfig = {
  HomePage: {
    path: "/",
    layout: ELayouts.CLIENT,
    isProtected: false,
    componentLocation: "pages/HomePage",
  },
  LoginPage: {
    path: "/login",
    layout: ELayouts.NA,
    isProtected: false,
    componentLocation: "pages/auth/LoginPage",
  },
  RegisterPage: {
    path: "/register",
    layout: ELayouts.NA,
    isProtected: false,
    componentLocation: "pages/auth/RegistrationPage",
  },
  ForgetPasswordPage: {
    path: "/auth/forget-password",
    layout: ELayouts.NA,
    isProtected: false,
    componentLocation: "pages/auth/ForgetPasswordPage",
  },
  ResetPasswordPage: {
    path: "/auth/reset-password/:token",
    layout: ELayouts.NA,
    isProtected: false,
    componentLocation: "pages/auth/PasswordResetPage",
  },
  AdminDashboardPage: {
    path: "/admin/dashboard",
    layout: ELayouts.ADMIN,
    isProtected: true,
    roles: [ERoles.ADMIN],
    componentLocation: "pages/admin/DashboardPage",
  },
  NotFoundPage: {
    path: "/404",
    layout: ELayouts.NA,
    isProtected: false,
    componentLocation: "pages/utilPages/NotFoundPage",
  },
  UnauthorizedPage: {
    path: "/unauthorized",
    layout: ELayouts.NA,
    isProtected: false,
    componentLocation: "pages/utilPages/UnauthorizedPage",
  },
  TestPage: {
    path: "/test",
    layout: ELayouts.NA,
    isProtected: false,
    componentLocation: "pages/TestPage",
  },
  ProfilePicturePage: {
    path: "/uprofile",
    layout: ELayouts.NA,
    isProtected: true,
    componentLocation: "pages/utilPages/ProfileUpload",
  },
  AddMovies: {
    path: "/movie/add",
    layout: ELayouts.ADMIN,
    isProtected: true,
    componentLocation: "pages/movie/AddmovieForm",
  },
  
  MovieDetailsPage: {
    path: "/movie/:slug",
    layout: ELayouts.CLIENT,
    isProtected: false,
    componentLocation: "pages/movie/movieDetailsPage",
  },
  
};export const MOCK_MOVIES = [
    { id: "1", title: "Moana" },
    { id: "2", title: "Movie B" },
  ];
  
  export const TERRITORIES = ["Kathmandu", "Pokhara"];import { z } from "zod";

export const LoginFormSchema = z.object({
  user_name: z
    .string()
    .min(1, { message: "Please provide your username or email." }),

  password: z.string().min(1, { message: "Please provide your password." }),
});

export const RegistrationFormSchema = z.object({
  full_name: z
  .string()
  .min(2, { message: "Full name must be at least 2 characters." })
  .max(50, { message: "Full name must be at most 50 characters." }),
  
  user_name: z
  .string()
  .min(1, { message: "Username must be at least 1 character." })
  .max(10, { message: "Username must be at most 10 characters." })
  .refine((val) => !val.includes("@"), {
    message: "Username cannot contain '@'.",
  }),

  email: z
    .string()
    .email({ message: "Invalid email format." })
    .min(2, { message: "Email must be at least 2 characters." }),

  phone_number: z.string().regex(/^(98|97)\d{8}$/, {
    message: "Phone number must be a valid Nepali mobile number.",
  }),

  password: z
    .string()
    .min(8, { message: "Password must be at least 8 characters." })
    .regex(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*])[A-Za-z\d!@#$%^&*]{8,}$/,
      {
        message:
          "Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number, and 1 special character.",
      }
    ),
});

export type LoginFormValues = z.infer<typeof LoginFormSchema>;
export type RegistrationFormValues = z.infer<typeof RegistrationFormSchema>;
import { z } from "zod";

export const movieSchema = z.object({
  name: z.string().min(1, "Name is required"),
  category: z.enum(["Nepali", "Bollywood", "Hollywood"]),
  description: z.string().min(1, "Description is required"),
  releaseDate: z.date(),
  duration_min: z.number().min(1, "Duration must be at least 1 minute"),
  language: z.enum(["Nepali", "Hindi", "English"]),
  posterURL: z.object({
    sm: z.string().url("Invalid URL for small poster").min(1, "Small poster URL is required"),
    lg: z.string().url("Invalid URL for large poster").min(1, "Large poster URL is required"),
  }),
  trailerURL: z.string().url("Invalid URL").min(1, "Trailer URL is required"),
  status: z.enum(["showing", "upcoming"]),
});

export type MovieFormValues = z.infer<typeof movieSchema>;import { z } from "zod";

export const locationSchema = z.object({
  locations: z.array(
    z.object({
      id: z.string(),
      address: z.string().nonempty("Location's address is required"),
      coordinates: z.object({
        latitude: z.string().nonempty("Latitude is required"),
        longitude: z.string().nonempty("Longitude is required"),
      }),
      commissionRate: z
        .number()
        .min(0, "Rate must be between 0 and 100")
        .max(100),
    })
  ),
  contacts: z.object({
    phoneNumbers: z.array(
      z.object({
        type: z
          .enum(["INQUIRY", "SUPPORT"])
          .refine((value) => ["INQUIRY", "SUPPORT"].includes(value), {
            message: "Invalid phone number type",
          }),
        locationId: z.string(),

        number: z
          .string()
          .nonempty("Phone number is required")
          .regex(
            /^(?:\+977[- ]?)?\d{10}$/,
            "Invalid Nepali phone number format"
          ),
      })
    ),
    emails: z.array(
      z.object({
        type: z
          .enum(["INQUIRY", "SUPPORT"])
          .refine((value) => ["INQUIRY", "SUPPORT"].includes(value), {
            message: "Invalid email type",
          }),
        locationId: z.string(),
        email: z.string().email("Invalid email format"),
      })
    ),
  }),
});

export const theatreSchema = z.object({
  name: z.string().min(2, "Name must be between 2 and 100 characters").max(100),
  locations: z.array(
    z.object({
      address: z.string().nonempty("Location's address is required"),
      coordinates: z.object({
        latitude: z.number(),
        longitude: z.number(),
      }),
      commissionRate: z
        .number()
        .min(0, "Rate must be between 0 and 100")
        .max(100),
    })
  ),
  contacts: z.array(
    z.object({
      location: z.string().nonempty("Location is required"),
      phoneNumbers: z.array(
        z.object({
          type: z
            .enum(["INQUIRY", "SUPPORT"])
            .refine((value) => ["INQUIRY", "SUPPORT"].includes(value), {
              message: "Invalid phone number type",
            }),
          number: z.string().nonempty("Phone number is required"),
        })
      ),
      emails: z.array(
        z.object({
          type: z
            .enum(["INQUIRY", "SUPPORT"])
            .refine((value) => ["INQUIRY", "SUPPORT"].includes(value), {
              message: "Invalid email type",
            }),
          email: z.string().email("Invalid email format"),
        })
      ),
    })
  ),
  isActive: z.boolean().optional(),
});
import { z } from "zod";

export const DistributorSchema = z.object({
  name: z
    .string()
    .nonempty("Name is required")
    .max(50, "Name must be less than 50 characters"),
  commissionRate: z
    .number()
    .min(0, "Commission rate cannot be negative")
    .max(100, "Commission rate cannot exceed 100"),
  isActive: z.boolean(),
});

export type DistributorFormData = z.infer<typeof DistributorSchema>;
import { z } from "zod";

export const DistributionRightFormSchema = z.object({
  movieId: z.string().nonempty("Movie is required"),
  commissionRate: z
    .number()
    .min(0, "Commission rate cannot be negative")
    .max(100, "Commission rate cannot exceed 100"),
  territories: z.array(z.string()).min(1, "At least one territory is required"),
  validFrom: z.string().nonempty("Valid From date is required"),
  validUntil: z.string().nonempty("Valid Until date is required"),
});

export type DistributionRightFormData = z.infer<
  typeof DistributionRightFormSchema
>;
import { z } from "zod";

export const LocationItemSchema = z.object({
  id: z.string(),
  type: z.enum(["HQ", "Branch"]),
  location: z
    .string()
    .min(1, "Address is required")
    .max(150, "Address must be less than 150 characters"),
  coordinates: z.object({
    latitude: z.string().nonempty("Latitude is required"),
    longitude: z.string().nonempty("Longitude is required"),
  }),
});

export const ContactPhoneSchema = z.object({
  type: z.enum(["INQUIRY", "SUPPORT"]),
  number: z
    .string()
    .regex(/^(?:\+977[- ]?)?\d{10}$/, "Invalid Nepali phone number format"),
  locationId: z.string(),
});

export const ContactEmailSchema = z.object({
  type: z.enum(["INQUIRY", "SUPPORT"]),
  email: z
    .string()
    .email("Invalid email address")
    .nonempty("Email is required"),
  locationId: z.string(),
});

export const LocationFormSchema = z.object({
  locations: z
    .array(LocationItemSchema)
    .min(1, "At least one address is required"),
  contacts: z.object({
    phoneNumbers: z
      .array(ContactPhoneSchema)
      .min(1, "At least one phone number is required"),
    emails: z
      .array(ContactEmailSchema)
      .min(1, "At least one email is required"),
  }),
});

export type LocationFormData = z.infer<typeof LocationFormSchema>;
export type LocationItem = z.infer<typeof LocationItemSchema>;
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
import { useContext } from "react";
import AuthContext  from "@/provider/authContext";
export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
      throw new Error('useAuth must be used within AuthProvider');
    }
    return context;
  };
  import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
import { QueryClient } from "@tanstack/react-query";

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: false,
    },
  },
});

export default queryClient;
/// <reference types="vite/client" />
